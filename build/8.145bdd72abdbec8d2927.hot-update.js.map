{"version":3,"file":"8.145bdd72abdbec8d2927.hot-update.js","sources":["webpack:///src/components/forms/SubmitDealForm/index.js"],"sourcesContent":["import React, { Component, Fragment } from 'react';\nimport { observer } from 'mobx-react';\nimport { withStyles } from 'material-ui/styles';\nimport Typography from 'material-ui/Typography';\nimport Divider from 'material-ui/Divider';\nimport Button from 'material-ui/Button';\nimport { Form, NestedField } from 'react-form';\nimport moment from 'moment';\nimport uuid from 'uuid/v4';\nimport Grid from 'material-ui/Grid';\nimport TextField from 'material-ui/TextField';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport CircularProgressbar from 'react-circular-progressbar';\nimport 'react-circular-progressbar/dist/styles.css';\nimport { MdFileDownload } from 'react-icons/lib/md';\nimport Tooltip from 'material-ui/Tooltip';\nimport { Icon } from 'antd';\nimport Lightbox from 'react-images';\nimport classnames from 'classnames';\nimport EyeIcon from '@material-ui/icons/RemoveRedEye';\nimport Menu from 'material-ui/Menu';\nimport MenuItem from 'material-ui/Menu/MenuItem';\nimport Input, { InputLabel, InputAdornment } from 'material-ui/Input';\nimport { FormControl } from 'material-ui/Form';\nimport MaterialCustomTextFieldWrapper from '../../MaterialCustomTextFieldWrapper';\nimport MaterialCustomRadioInputWrapper from '../../MaterialCustomRadioInputWrapper';\nimport MaterialCustomSelectInputWrapper from '../../MaterialCustomSelectInputWrapper';\nimport CustomFileUploadInputWrapper from '../../CustomFileUploadInputWrapper';\nimport { capitalize } from '../../../utils/stringUtils';\nimport validators, {\n  paymentTypeValidator,\n  checkOrTransactionNumberValidator,\n  paymentAmountValidator,\n  deductionTypeValidator,\n  descriptionValidator,\n  deductionsAmountValidator,\n  agencyDisclosureFormValidator,\n  ACHAccountNumberValidator,\n} from './formValidation';\nimport {\n  agent as agentRole,\n  admin,\n  superAdmin,\n} from '../../../constants/userTypes';\nimport { padStringToDecimalString } from '../../../utils/Math';\n\nconst CustomTextField = MaterialCustomTextFieldWrapper;\nconst MaterialCustomRadioInput = MaterialCustomRadioInputWrapper;\nconst MaterialCustomSelectInput = MaterialCustomSelectInputWrapper;\nconst CustomFileUploadInputBtn = CustomFileUploadInputWrapper;\n\nconst acceptedFileExtensions = ['jpg', 'jpeg', 'pdf'];\n\nconst styles = theme => ({\n  container: {\n    display: 'flex',\n    flexWrap: 'wrap',\n    flexDirection: 'column',\n    alignItems: 'center',\n    justifyContent: 'center',\n    height: '100%',\n    padding: theme.spacing.unit * 3,\n    backgroundColor: '#fff',\n    borderRadius: '5px',\n    boxShadow: theme.shadows[3],\n  },\n  formControlWrapper: {\n    paddingLeft: theme.spacing.unit,\n    paddingRight: theme.spacing.unit,\n  },\n  formControl: {\n    marginLeft: 0,\n    marginRight: 0,\n  },\n  alignCenter: {\n    textAlign: 'center',\n  },\n  formHeader: {\n    marginBottom: theme.spacing.unit * 3,\n  },\n  formWrapper: {\n    paddingLeft: theme.spacing.unit * 4,\n    paddingRight: theme.spacing.unit * 4,\n    textAlign: 'center',\n  },\n  formRoot: {\n    paddingBottom: 10,\n    flexGrow: 1,\n    justifyContent: 'center',\n    overflow: 'hidden',\n  },\n  radioInputWrapper: {\n    marginLeft: 'auto',\n    marginRight: 'auto',\n  },\n  formSubheading: {\n    width: '100%',\n    textAlign: 'center',\n    paddingTop: '82px',\n  },\n  h3: {\n    fontWeight: theme.typography.fontWeightMedium,\n  },\n  addPaymentBtn: {\n    marginTop: '10px',\n  },\n  removePaymentBtn: {\n    marginTop: '5px',\n    marginLeft: '28px',\n  },\n  paymentItemsWrapper: {\n    display: 'flex',\n    width: '100%',\n    padding: '5px 0 12px 0',\n    flexWrap: 'wrap',\n    boxSizing: 'border-box',\n    '& > div': {\n      paddingLeft: '12px',\n      paddingRight: '12px',\n    },\n  },\n  formMiniHeading: {\n    width: '100%',\n    textAlign: 'left',\n    paddingLeft: '28px',\n  },\n  formMiniHeading2: {\n    width: '100%',\n    textAlign: 'left',\n    paddingLeft: '28px',\n    marginTop: '60px',\n  },\n  topPaymentMethodWrapper: {\n    paddingTop: '0',\n  },\n  paddingBottom10: {\n    paddingBottom: '15px',\n  },\n  greenText: {\n    color: '#448A19',\n  },\n  redText: {\n    color: '#ED462F',\n  },\n  blueText: {\n    color: '#3878D8',\n  },\n  financialsTotal: {\n    backgroundColor: 'rgba(0,0,0,.12)',\n  },\n  uploadBtnClassName: {\n    color: '#fff',\n    backgroundColor: '#272A2E',\n    boxShadow:\n      '0px 1px 5px 0px rgba(0, 0, 0, 0.2), 0px 2px 2px 0px rgba(0, 0, 0, 0.14), 0px 3px 1px -2px rgba(0, 0, 0, 0.12)',\n    padding: '8px 16px',\n    minWidth: '88px',\n    fontSize: '0.875rem',\n    boxSizing: 'border-box',\n    minHeight: '36px',\n    transition:\n      'background-color 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms,box-shadow 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms',\n    lineHeight: '1.4em',\n    fontFamily: '\"Roboto\", \"Helvetica\", \"Arial\", sans-serif',\n    fontWeight: '500',\n    borderRadius: '2px',\n    textTransform: 'uppercase',\n    cursor: 'pointer',\n    '&:hover': {\n      backgroundColor: '#000',\n    },\n    addUploadBtnClassName: {},\n  },\n  fileUploadBtnWrapper2: {\n    position: 'relative',\n    display: 'inline-block',\n  },\n  fileUploadBtnWrapper: {\n    position: 'relative',\n    display: 'inline-block',\n  },\n  smallFileAddBtn: {\n    width: '40px',\n    height: '40px',\n    minWidth: '40px',\n    minHeight: '40px',\n    backgroundColor: '#2995F3',\n    transition:\n      'background-color 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms,box-shadow 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms',\n    '&:hover': {\n      backgroundColor: '#2483D6',\n    },\n  },\n  smallFileRemoveBtn: {\n    width: '40px',\n    height: '40px',\n    minWidth: '40px',\n    minHeight: '40px',\n    position: 'absolute',\n    top: '5px',\n    marginLeft: '6px',\n  },\n  smallFileViewBtn: {\n    width: '35px',\n    height: '35px',\n    minWidth: '35px',\n    minHeight: '35px',\n    position: 'absolute',\n    backgroundColor: '#008000',\n    top: '8px',\n    marginLeft: '6px',\n    color: '#fff',\n    transition:\n      'background-color 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms,box-shadow 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms',\n    '&:hover': {\n      backgroundColor: '#067706',\n    },\n    [theme.breakpoints.down('xs')]: {\n      position: 'relative',\n      marginTop: '-18px',\n    },\n    '@media only screen and (max-width: 400px)': {\n      position: 'relative',\n      marginTop: '0 !important',\n    },\n  },\n  uploadContractDivWrapper: {\n    position: 'relative',\n  },\n  blueBackgroundColor: {\n    backgroundColor: '#2995F3',\n  },\n  finalTotalLabelClass: {\n    paddingLeft: '10px',\n  },\n  finalTotalInputClass: {\n    backgroundColor: 'rgba(0,0,0,.12)',\n    borderRadius: '5px 5px 0 0',\n    paddingLeft: '10px',\n  },\n  ManagementOrCobrokeCompanyTextField: {\n    width: '100%',\n    margin: 8,\n    marginLeft: 0,\n  },\n  progressBarWrapper: {\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'center',\n    alignItems: 'center',\n    width: '100%',\n  },\n  formSubmittingWrapper: {\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'center',\n    alignItems: 'center',\n    width: '100%',\n  },\n  progressBar: {\n    width: '25%',\n  },\n  progressBarExplanation: {\n    marginTop: '20px',\n    fontSize: '1.1rem',\n  },\n  gridContainer: {\n    marginBottom: 0,\n  },\n  viewIcon: {\n    fontSize: '1.2rem',\n  },\n  disabled: {\n    cursor: 'not-allowed',\n  },\n  fullwidthInput: {\n    width: '100%',\n  },\n  downloadFileBtn: {\n    display: 'flex',\n    alignSelf: 'center',\n    justifyContent: 'center',\n    alignItems: 'center',\n    height: '26px',\n    width: '26px',\n    border: 'none',\n    borderRadius: '50%',\n    fontSize: '1rem',\n    color: '#fff !important',\n    backgroundColor: '#646d64',\n    boxShadow: theme.shadows[2],\n    zIndex: '2',\n    cursor: 'pointer',\n    outline: 'none',\n    transition: 'transform .2s ease-in-out',\n    '&:hover': {\n      transform: 'scale(1.1,1.1)',\n    },\n  },\n  popupMenuTitle: {\n    display: 'flex',\n    justifyContent: 'center',\n    outline: 'none',\n    padding: '12px 16px',\n    width: 'auto',\n    color: 'rgba(0, 0, 0, 0.87)',\n    height: '24px',\n    overflow: 'hidden',\n    fontSize: '1rem',\n    boxSizing: 'content-box',\n    fontWeight: '400',\n    lineHeight: '1.5em',\n    fontFamily: '\"Roboto\", \"Helvetica\", \"Arial\", sans-serif',\n    whiteSpace: 'nowrap',\n    paddingLeft: '16px',\n    textOverflow: 'ellipsis',\n    paddingRight: '16px',\n    borderBottom: '1px solid rgba(0,0,0,.1)',\n    pointerEvents: 'none',\n  },\n  menuItem: {\n    display: 'flex !important',\n    justifyContent: 'center !important',\n  },\n});\n\nconst radioInputAgentItems = [\n  { label: '60%', value: '60' },\n  { label: '70%', value: '70' },\n  { label: '80%', value: '80' },\n];\n\nconst radioInputAgentPaymentItems = [\n  { label: \"I'll pick up the check\" },\n  { label: 'Please ACH me' },\n];\n\nconst radioInputYesNoItems = [{ label: 'Yes' }, { label: 'No' }];\n\nconst dealTypeSelectItems = [\n  { label: 'Residential Rental' },\n  { label: 'Residential Sale' },\n  { label: 'Commercial Rental' },\n  { label: 'Commercial Sale' },\n];\n\nconst fundsPaidBySelectItems = [\n  { label: 'Bringing a certified check to the office' },\n  { label: 'Remote deposit to Chase account' },\n  { label: 'Check or \"OP\" mailed to office' },\n  { label: 'Credit card payment' },\n  { label: 'Client wired funds' },\n];\n\nconst paymentTypeSelectItems = [\n  { label: 'Certified Check' },\n  { label: 'Money Order' },\n  { label: 'Wire' },\n  { label: 'Owner Pays (OP)' },\n];\n\nconst deductionTypeSelectItems = [\n  { label: 'Co-Brokering Split' },\n  { label: 'Company Deal Fee' },\n  { label: 'Outside Company Check' },\n];\n\nconst imagePreloader = images => {\n  images.forEach(imageItem => {\n    if (imageItem && imageItem.src) {\n      const fileType = imageItem.src.split('.').pop();\n\n      if (fileType.toLowerCase === 'pdf') return;\n\n      const newImage = new Image();\n\n      newImage.src = imageItem.src;\n    }\n  });\n};\n\n@observer\nclass SubmitDealForm extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      shouldRenderInitialDeductionItem: true,\n      lightboxIsOpen: false,\n      currentLightBoxIndex: 0,\n      lightboxType: 'agencyDisclosure',\n      contractLeaseAnchorEl: null,\n      agencyDisclosureAnchorEl: null,\n      currentLightboxItem: [{ src: '' }],\n    };\n  }\n\n  componentDidMount() {\n    if (this.props.setInitialContainerState && this.props.submittedDeal) {\n      this.props.setInitialContainerState({\n        paymentsTotal: this.props.submittedDeal.paymentsTotal,\n        deductionsTotal: this.props.submittedDeal.deductionsTotal,\n        total: this.props.submittedDeal.total,\n      });\n\n      imagePreloader([\n        ...this.returnContractLeaseURLS(),\n        ...this.returnAgencyDisclosureURL(),\n      ]);\n    }\n\n    if (this.props.resetDealBonus) {\n      this.props.resetDealBonus();\n    }\n  }\n\n  returnAgencyDisclosureURL = () => {\n    const { submittedDeal } = this.props;\n    if (!submittedDeal) return [];\n    const src = submittedDeal.agencyDisclosureForm;\n    const fileName = src.split('/').pop();\n    const encodedFileName = encodeURIComponent(fileName);\n    const srcArray = src.split('/');\n    const encodedSrc = `${srcArray.slice(0, srcArray.length - 1).join('/')}/${encodedFileName}`;\n\n    if (submittedDeal.agencyDisclosureForm) {\n      return [\n        {\n          src: encodedSrc,\n        },\n      ];\n    }\n  };\n\n  returnContractLeaseURLS = () => {\n    const { submittedDeal } = this.props;\n    if (!submittedDeal) return [];\n\n    if (submittedDeal.contractOrLeaseForms) {\n      return submittedDeal.contractOrLeaseForms.map(url => {\n        const fileName = url.split('/').pop();\n        const urlArray = url.split('/');\n\n        const encodedFileName = encodeURIComponent(fileName);\n        const encodedUrl = `${urlArray.slice(0, urlArray.length - 1).join('/')}/${encodedFileName}`;\n        return {\n          src: encodedUrl,\n        };\n      });\n    }\n  };\n\n  openFileLightBox = item => {\n    this.setState({\n      lightboxIsOpen: true,\n      currentLightBoxIndex: 0,\n      lightboxType: 'contractLease',\n      currentLightboxItem: [item],\n    });\n  };\n\n  openFileViewer = (src, fileName, fileType) => {\n    if (fileType === 'pdf' && fileType === 'PDF') {\n      return;\n    }\n\n    this.openFileLightBox({\n      src,\n    });\n  };\n\n  closeLightbox = () => {\n    this.setState({ lightboxIsOpen: false });\n  };\n\n  onClickPrev = () => {\n    const { currentLightBoxIndex } = this.state;\n\n    this.setState({\n      currentLightBoxIndex: currentLightBoxIndex - 1,\n    });\n  };\n\n  onClickNext = () => {\n    const { currentLightBoxIndex } = this.state;\n\n    this.setState({\n      currentLightBoxIndex: currentLightBoxIndex + 1,\n    });\n  };\n\n  onClickThumbnail = index => {\n    this.setState({\n      currentLightBoxIndex: index,\n    });\n  };\n\n  downloadFile = async () => {\n    const urls = this.state.lightboxType === 'agencyDisclosure'\n      ? this.returnAgencyDisclosureURL()\n      : this.returnContractLeaseURLS();\n\n    const fileType = urls[this.state.currentLightBoxIndex].src.split('.').pop();\n\n    let objectURL;\n\n    try {\n      const res = await fetch(\n        `${urls[this.state.currentLightBoxIndex].src}?v=10`\n      );\n      console.log(res);\n      objectURL = URL.createObjectURL(await res.blob());\n    } catch (err) {\n      console.log(err);\n      return;\n    }\n\n    if (this._fileLink) {\n      this._fileLink.setAttribute('href', objectURL);\n      this._fileLink.setAttribute(\n        'download',\n        `${this.state.lightboxType}${this.state.currentLightBoxIndex + 1}`\n      );\n      this._fileLink.click();\n    }\n  };\n\n  returnDownloadFileBtn = () => {\n    const { classes } = this.props;\n\n    return (\n      <Tooltip\n        title=\"Download current file.\"\n        enterDelay={300}\n        leaveDelay={100}\n        PopperProps={{ style: { zIndex: 2100 } }}\n      >\n        <button className={classes.downloadFileBtn} onClick={this.downloadFile}>\n          <MdFileDownload />\n        </button>\n      </Tooltip>\n    );\n  };\n\n  handleContractLeaseMenuClick = event => {\n    this.setState({ contractLeaseAnchorEl: event.currentTarget });\n  };\n\n  handleContractLeaseMenuClose = () => {\n    this.setState({ contractLeaseAnchorEl: null });\n  };\n\n  handleAgencyDisclosureMenuClick = event => {\n    this.setState({ agencyDisclosureAnchorEl: event.currentTarget });\n  };\n\n  handleAgencyDisclosureMenuClose = () => {\n    this.setState({ agencyDisclosureAnchorEl: null });\n  };\n\n  renderRestDeductionItems(formApi, splitAgents) {\n    const {\n      classes, submittedDeal, isEditingDeal, deductionAmountChangeHandler, subtractDeductionValueFromState,\n      isViewType,\n    } = this.props;\n    const { shouldRenderInitialDeductionItem } = this.state;\n    if (\n      !formApi.values.deductionItems\n          || !formApi.values.deductionItems.length\n    ) return;\n    const deductionItems = formApi.values.deductionItems.map(\n      (deductionItem, i) => {\n        const isAgentSplit = deductionItem && deductionItem.deductionType === 'Co-Brokering Split';\n        const canRenderSplitAgentId = !!splitAgents.length && isAgentSplit;\n        const rowSize = canRenderSplitAgentId ? 3 : 4;\n        return (\n          <div className={classes.paymentItemsWrapper} key={`Deduction-item-${i.toString()}`}>\n            <NestedField field={['deductionItems', i]}>\n              <Grid item sm={rowSize} xs={12}>\n                <div className={classes.formControlWrapper}>\n                  <MaterialCustomSelectInput\n                    field=\"deductionType\"\n                    id={uuid()}\n                    fullWidth\n                    label=\"Deduction Type\"\n                    name=\"deductionType\"\n                    required\n                    selectInputItems={deductionTypeSelectItems}\n                    validate={deductionTypeValidator}\n                    disabled={submittedDeal && !isEditingDeal}\n                  />\n                </div>\n              </Grid>\n\n              {canRenderSplitAgentId && (\n                <Grid item sm={rowSize} xs={12}>\n                  <div className={classes.formControlWrapper}>\n                    <MaterialCustomSelectInput\n                      field=\"agentID\"\n                      id={uuid()}\n                      fullWidth\n                      label=\"Select Agent\"\n                      name=\"agentID\"\n                      required\n                      selectInputItems={splitAgents}\n                      disabled={(submittedDeal && !isEditingDeal) || isViewType}\n                    />\n                  </div>\n                </Grid>\n              )}\n\n              <Grid item sm={rowSize} xs={12}>\n                <div className={classes.formControlWrapper}>\n                  <CustomTextField\n                    field=\"description\"\n                    id={uuid()}\n                    label=\"Description\"\n                    fullWidth\n                    required\n                    validate={descriptionValidator}\n                    disabled={submittedDeal && !isEditingDeal}\n                  />\n                </div>\n              </Grid>\n\n              <Grid item sm={rowSize} xs={12}>\n                <div className={classes.formControlWrapper}>\n                  <CustomTextField\n                    field=\"amount\"\n                    id={uuid()}\n                    label=\"Amount\"\n                    fullWidth\n                    validate={deductionsAmountValidator}\n                    noLetters\n                    required\n                    noNegativeSign\n                    onChangeWithID={\n                      deductionAmountChangeHandler\n                    }\n                    isDollarAmount\n                    disabled={submittedDeal && !isEditingDeal}\n                  />\n                </div>\n              </Grid>\n            </NestedField>\n            <Button\n              classes={{ root: classes.removePaymentBtn }}\n              variant=\"raised\"\n              color=\"secondary\"\n              onClick={() => {\n                const amount = Number(\n                  formApi.values.deductionItems[i].amount\n                );\n\n                if (amount) {\n                  subtractDeductionValueFromState(amount);\n                }\n                formApi.removeValue('deductionItems', i);\n              }}\n              type=\"button\"\n            >\n                          Remove\n            </Button>\n          </div>\n        );\n      }\n    );\n    if (shouldRenderInitialDeductionItem) {\n      return deductionItems.slice(1);\n    }\n    return deductionItems;\n  }\n\n  render() {\n    const {\n      classes,\n      setAgencyDisclosureForm,\n      setContractOrLeaseForms,\n      agencyDisclosureForm,\n      contractOrLeaseForms,\n      subtractPaymentValueFromState,\n      subtractDeductionValueFromState,\n      choosingMgmtCoBrokeCompany,\n      toggleChoosingMgmtCoBrokeCompany,\n      handleMgmtOrCobrokeCompanyChange,\n      setHasSetNewMgmtOrCobrokeCompany,\n      newMgmtOrCobrokeCompany,\n      addedManagementCompanies,\n      agents,\n      uplodingFileProgress,\n      isUploadingFile,\n      uplodingFileText,\n      formSubmissionBegun,\n      submittingFormToServer,\n      submittedDeal,\n      isEditingDeal,\n      isViewType,\n      agentUUID,\n      managementCobrokeCompanyItems,\n      agentPaymentTypeIsACH,\n      onSubmit,\n      userRole,\n    } = this.props;\n\n    const { contractLeaseAnchorEl, agencyDisclosureAnchorEl } = this.state;\n\n    const managementCobrokeCompanies = managementCobrokeCompanyItems && managementCobrokeCompanyItems.length\n      ? [...managementCobrokeCompanyItems]\n      : [];\n\n    if (submittedDeal && submittedDeal.managementOrCobrokeCompany) {\n      if (\n        !managementCobrokeCompanies.includes(\n          submittedDeal.managementOrCobrokeCompany\n        )\n      ) {\n        managementCobrokeCompanies.push(\n          submittedDeal.managementOrCobrokeCompany\n        );\n      }\n    }\n\n    const agentsSelectItems = agents\n      .filter(agent => (agentUUID ? agent.uuid !== agentUUID : agent))\n      .map(({ firstName, lastName, uuid }) => ({\n        label: `${capitalize(firstName)} ${capitalize(\n          lastName\n        )} (Agent ID - ${uuid})`,\n        key: uuid,\n        value: uuid,\n      }));\n\n    if (isViewType && submittedDeal && submittedDeal.deductionItems.length) {\n      submittedDeal.deductionItems.forEach(item => {\n        if (item.deductionType === 'Co-Brokering Split') {\n          const { firstName, lastName } = agents.find(agent => agent.uuid === item.agentID);\n          const agentName = `${capitalize(firstName)} ${capitalize(\n            lastName\n          )} (Agent ID - ${item.agentID})`;\n          agentsSelectItems.push({\n            label: agentName,\n            key: item.agentID,\n            value: item.agentID,\n          });\n        }\n      });\n    }\n\n    let managementCobrokeCompanySelectItems = managementCobrokeCompanies.map(\n      company => ({ label: company })\n    );\n\n    managementCobrokeCompanySelectItems = managementCobrokeCompanySelectItems\n      ? [\n        ...managementCobrokeCompanySelectItems,\n        ...addedManagementCompanies.map(company => ({ label: company })),\n        { label: 'Add a new item...' },\n      ]\n      : [];\n\n    /*\n      const {\n        firstName,\n        lastName,\n        uuid: agentUUID,\n        agent: agentPart,\n      } = this.props.agent;\n      const { agentType, state } = agentPart;\n      */\n\n    let finalDefaultValues;\n\n    if (submittedDeal) {\n      const {\n        agentNotes,\n        agentType,\n        agentName,\n        alreadyTurnedFundsIn,\n        city,\n        clientEmail,\n        clientName,\n        date,\n        dealType,\n        leadSource,\n        managementOrCobrokeCompany,\n        propertyAddress,\n        shouldSendApprovalTextMessageNotification,\n        state,\n        fundsPaidBy,\n        agentPaymentType,\n        price,\n        paymentsTotal,\n        deductionsTotal,\n        paymentItems,\n        deductionItems,\n        apartmentNumber,\n        total,\n        bonusPercentageAddedByAdmin,\n        ACHAccountNumber,\n        ACHAccountBankRoutingNumber,\n      } = submittedDeal;\n      finalDefaultValues = {\n        agent: agentName,\n        agentNotes,\n        agentType,\n        alreadyTurnedFundsIn,\n        city,\n        apartmentNumber,\n        clientEmail,\n        clientName,\n        date: moment(date).format('MMMM Do YYYY'),\n        dealType,\n        leadSource,\n        agentPaymentType,\n        managementOrCobrokeCompany,\n        propertyAddress,\n        shouldSendApprovalTextMessageNotification,\n        state,\n        fundsPaidBy,\n        price,\n        paymentItems: paymentItems.map(\n          ({ paymentType, checkOrTransactionNumber, amount }) => ({\n            paymentType,\n            checkOrTransactionNumber,\n            amount,\n          })\n        ),\n        deductionItems: deductionItems.map(\n          ({\n            deductionType, agentID, description, amount,\n          }) => ({\n            deductionType,\n            description,\n            amount,\n            agentID,\n          })\n        ),\n        paymentsSubtotal: paymentsTotal ? paymentsTotal.toLocaleString() : '0',\n        deductionsSubtotal: deductionsTotal\n          ? deductionsTotal.toLocaleString()\n          : '0',\n        financialsTotal: total ? total.toLocaleString() : '0',\n        ACHAccountNumber,\n        ACHAccountBankRoutingNumber,\n        bonusPercentageAddedByAdmin: `${bonusPercentageAddedByAdmin}`,\n      };\n    }\n\n    const renderContractLeaseMenuItems = () => this.returnContractLeaseURLS().map(({ src }) => {\n      const fileName = decodeURIComponent(src.split('/').pop());\n      const fileType = src.split('.').pop();\n\n      if (fileType.toLowerCase() === 'pdf') {\n        return (\n          <a href={src} target=\"_blank\">\n            <MenuItem\n              classes={{ root: classes.menuItem }}\n              onClick={() => {\n                this.handleContractLeaseMenuClose();\n              }}\n            >\n              {fileName}\n            </MenuItem>\n          </a>\n        );\n      }\n\n      return (\n        <MenuItem\n          classes={{ root: classes.menuItem }}\n          onClick={() => {\n            this.handleContractLeaseMenuClose();\n            this.openFileViewer(src, fileName, fileType);\n          }}\n        >\n          {fileName}\n        </MenuItem>\n      );\n    });\n\n    const renderAgencyDisclosureMenuItems = () => this.returnAgencyDisclosureURL().map(({ src }) => {\n      const fileName = decodeURIComponent(src.split('/').pop());\n      const fileType = src.split('.').pop();\n\n      if (fileType.toLowerCase() === 'pdf') {\n        return (\n          <MenuItem\n            classes={{ root: classes.menuItem }}\n            onClick={this.handleAgencyDisclosureMenuClose}\n          >\n            <a href={src} target=\"_blank\">\n              {fileName}\n            </a>\n          </MenuItem>\n        );\n      }\n\n      return (\n        <MenuItem\n          classes={{ root: classes.menuItem }}\n          onClick={() => {\n            this.handleAgencyDisclosureMenuClose();\n            this.openFileViewer(src, fileName, fileType);\n          }}\n        >\n          {fileName}\n        </MenuItem>\n      );\n    });\n\n    return (\n      <div className={classes.formWrapper}>\n        <a\n          href=\"#\"\n          id=\"fileLink\"\n          ref={ref => (this._fileLink = ref)}\n          style={{\n            visibility: 'hidden',\n            position: 'absolute',\n            poniterEvents: 'none',\n          }}\n        />\n\n        <Menu\n          id=\"simple-menu\"\n          anchorEl={contractLeaseAnchorEl}\n          open={Boolean(contractLeaseAnchorEl)}\n          onClose={this.handleContractLeaseMenuClose}\n        >\n          <div className={classes.popupMenuTitle}>Contract/Lease Items</div>\n          {renderContractLeaseMenuItems()}\n        </Menu>\n\n        <Menu\n          id=\"simple-menu2\"\n          anchorEl={agencyDisclosureAnchorEl}\n          open={Boolean(agencyDisclosureAnchorEl)}\n          onClose={this.handleAgencyDisclosureMenuClose}\n        >\n          <div className={classes.popupMenuTitle}>Agency Disclosure Form</div>\n          {renderAgencyDisclosureMenuItems()}\n        </Menu>\n\n        <Form\n          defaultValues={\n            !finalDefaultValues && this.props.agent\n              ? {\n                date: `${moment().format('MMMM Do YYYY')}`,\n                agentType: `${this.props.agent.agent.agentType}`,\n                state: this.props.agent.agent.state,\n                agent: `${capitalize(\n                  this.props.agent.firstName\n                )} ${capitalize(this.props.agent.lastName)}`,\n                paymentsSubtotal: this.props.paymentsTotal,\n                deductionsSubtotal: this.props.deductionsTotal,\n                ACHAccountNumber: this.props.agent.agent.ACHAccountNumber\n                  ? `${this.props.agent.agent.ACHAccountNumber}`\n                  : undefined,\n                ACHAccountBankRoutingNumber: this.props.agent.agent\n                  .ACHAccountBankRoutingNumber\n                  ? `${this.props.agent.agent.ACHAccountBankRoutingNumber}`\n                  : undefined,\n              }\n              : finalDefaultValues\n          }\n          preValidate={this.preValidate}\n          validateOnMount\n          onSubmit={values => {\n            if (onSubmit) {\n              onSubmit(values);\n            }\n          }}\n          onSubmitFailure={this.props.onSubmitFailure}\n          validate={validators}\n          getApi={formApi => {\n            this.props.getFormApi(formApi);\n          }}\n        >\n          {formApi => {\n            const isAgentSplit = formApi.values.deductionItems\n              && formApi.values.deductionItems[0]\n              && formApi.values.deductionItems[0].deductionType === 'Co-Brokering Split';\n\n            const canRenderSplitAgentId = !!agentsSelectItems.length && isAgentSplit;\n            const rowSize = canRenderSplitAgentId ? 3 : 4;\n\n            return (\n              <form\n                onSubmit={formApi.submitForm}\n                id=\"form1\"\n                className={classes.formRoot}\n                style={{\n                  display:\n                    formSubmissionBegun || submittingFormToServer\n                      ? 'none'\n                      : undefined,\n                }}\n              >\n                <Grid container spacing={24}>\n                  <Grid item sm={6} xs={12}>\n                    <div className={classes.formControlWrapper}>\n                      <CustomTextField\n                        field=\"date\"\n                        id={uuid()}\n                        label=\"Date\"\n                        disabled\n                        fullWidth\n                        required\n                      />\n                    </div>\n                  </Grid>\n                  <Grid item sm={6} xs={12}>\n                    <div className={classes.formControlWrapper}>\n                      <CustomTextField\n                        field=\"agent\"\n                        id={uuid()}\n                        label=\"Agent\"\n                        disabled\n                        fullWidth\n                        required\n                      />\n                    </div>\n                  </Grid>\n\n                  <div\n                    className={`${classes.formControlWrapper} ${\n                      classes.radioInputWrapper\n                    }`}\n                  >\n                    <MaterialCustomRadioInput\n                      field=\"agentType\"\n                      id={uuid()}\n                      required\n                      label=\"Agent Type\"\n                      radioInputItems={radioInputAgentItems}\n                      disabled\n                      horizontal\n                    />\n                  </div>\n\n                  <Grid item xs={12}>\n                    <div className={classes.formControlWrapper}>\n                      <CustomTextField\n                        field=\"leadSource\"\n                        id={uuid()}\n                        label=\"Lead Source\"\n                        fullWidth\n                        disabled={submittedDeal && !isEditingDeal}\n                      />\n                    </div>\n                  </Grid>\n\n                  <div className={classes.formSubheading}>\n                    <Typography\n                      variant=\"subheading\"\n                      classes={{ subheading: classes.h3 }}\n                    >\n                      Property Information\n                    </Typography>\n                  </div>\n\n                  <Grid item sm={6} xs={12}>\n                    <div className={classes.formControlWrapper}>\n                      <MaterialCustomSelectInput\n                        field=\"dealType\"\n                        id={uuid()}\n                        required\n                        fullWidth\n                        disabled={submittedDeal && !isEditingDeal}\n                        label=\"Deal Type\"\n                        name=\"dealType\"\n                        selectInputItems={dealTypeSelectItems}\n                      />\n                    </div>\n                  </Grid>\n\n                  <Grid item sm={6} xs={12}>\n                    <div className={classes.formControlWrapper}>\n                      <CustomTextField\n                        field=\"propertyAddress\"\n                        id={uuid()}\n                        label=\"Property Address\"\n                        required\n                        fullWidth\n                        disabled={submittedDeal && !isEditingDeal}\n                      />\n                    </div>\n                  </Grid>\n                  <Grid item sm={6} xs={12}>\n                    <div className={classes.formControlWrapper}>\n                      <CustomTextField\n                        field=\"state\"\n                        id={uuid()}\n                        label=\"State\"\n                        required\n                        fullWidth\n                        disabled\n                      />\n                    </div>\n                  </Grid>\n                  <Grid item sm={6} xs={12}>\n                    <div className={classes.formControlWrapper}>\n                      <CustomTextField\n                        field=\"city\"\n                        id={uuid()}\n                        label=\"City\"\n                        required\n                        fullWidth\n                        disabled={submittedDeal && !isEditingDeal}\n                      />\n                    </div>\n                  </Grid>\n                  <Grid item sm={6} xs={12}>\n                    <div className={classes.formControlWrapper}>\n                      <CustomTextField\n                        field=\"apartmentNumber\"\n                        id={uuid()}\n                        label=\"Apartment Number\"\n                        required\n                        fullWidth\n                        disabled={submittedDeal && !isEditingDeal}\n                      />\n                    </div>\n                  </Grid>\n\n                  {!choosingMgmtCoBrokeCompany ? (\n                    <Grid item sm={6} xs={12}>\n                      <div className={classes.formControlWrapper}>\n                        <MaterialCustomSelectInput\n                          field=\"managementOrCobrokeCompany\"\n                          id={uuid()}\n                          required\n                          fullWidth\n                          label=\"Management/Co-Broke Company\"\n                          name=\"managementOrCobrokeCompany\"\n                          onChange={value => {\n                            if (value === 'Add a new item...') {\n                              toggleChoosingMgmtCoBrokeCompany(true);\n                            }\n                          }}\n                          selectInputItems={managementCobrokeCompanySelectItems}\n                          disabled={submittedDeal && !isEditingDeal}\n                        />\n                      </div>\n                    </Grid>\n                  ) : (\n                    <Grid item sm={6} xs={12}>\n                      <div className={classes.formControlWrapper}>\n                        <TextField\n                          id=\"newManagementOrCobrokeCompany\"\n                          label=\"Add Mgmt/Co-broke Company...\"\n                          value={newMgmtOrCobrokeCompany}\n                          className={\n                            classes.ManagementOrCobrokeCompanyTextField\n                          }\n                          onChange={handleMgmtOrCobrokeCompanyChange}\n                          margin=\"normal\"\n                        />\n                      </div>\n                      <Button\n                        classes={{ root: classes.removePaymentBtn }}\n                        variant=\"raised\"\n                        color=\"secondary\"\n                        style={{ marginLeft: '0' }}\n                        onClick={() => {\n                          toggleChoosingMgmtCoBrokeCompany(false);\n                          formApi.setValue('managementOrCobrokeCompany', '');\n                        }}\n                        type=\"button\"\n                      >\n                        Cancel\n                      </Button>\n                      <Button\n                        classes={{ root: classes.addPaymentBtn }}\n                        variant=\"raised\"\n                        color=\"primary\"\n                        style={{ marginLeft: '10px', marginTop: '5px' }}\n                        onClick={() => {\n                          const trimmedItem = newMgmtOrCobrokeCompany.trim();\n                          if (!newMgmtOrCobrokeCompany || !trimmedItem) return;\n\n                          const items = [\n                            ...managementCobrokeCompanyItems,\n                            ...addedManagementCompanies,\n                          ];\n\n                          const regex = new RegExp(trimmedItem, 'i');\n\n                          const match = items.filter(item => item.match(regex));\n\n                          if (match.length) {\n                            toggleChoosingMgmtCoBrokeCompany(false);\n                            formApi.setValue(\n                              'managementOrCobrokeCompany',\n                              match[0]\n                            );\n                            return;\n                          }\n\n                          setHasSetNewMgmtOrCobrokeCompany();\n                          formApi.setValue(\n                            'managementOrCobrokeCompany',\n                            capitalize(newMgmtOrCobrokeCompany)\n                          );\n                        }}\n                        type=\"button\"\n                      >\n                        Add Item\n                      </Button>\n                    </Grid>\n                  )}\n\n                  <Grid item xs={12}>\n                    <div className={classes.formControlWrapper}>\n                      <CustomTextField\n                        field=\"price\"\n                        id={uuid()}\n                        label=\"Rent or Sale Price\"\n                        required\n                        fullWidth\n                        noLetters\n                        isDollarAmount\n                        disabled={submittedDeal && !isEditingDeal}\n                      />\n                    </div>\n                  </Grid>\n\n                  <div className={classes.formSubheading}>\n                    <Typography\n                      variant=\"subheading\"\n                      classes={{ subheading: classes.h3 }}\n                    >\n                      {\"Client's\"}\n                      {' '}\n                      Information\n                    </Typography>\n                  </div>\n\n                  <Grid item sm={6} xs={12}>\n                    <div className={classes.formControlWrapper}>\n                      <CustomTextField\n                        field=\"clientName\"\n                        id={uuid()}\n                        label=\"Client's Name\"\n                        required\n                        fullWidth\n                        disabled={submittedDeal && !isEditingDeal}\n                      />\n                    </div>\n                  </Grid>\n                  <Grid item sm={6} xs={12}>\n                    <div className={classes.formControlWrapper}>\n                      <CustomTextField\n                        field=\"clientEmail\"\n                        id={uuid()}\n                        label=\"Client Email\"\n                        required\n                        fullWidth\n                        type=\"email\"\n                        disabled={submittedDeal && !isEditingDeal}\n                      />\n                    </div>\n                  </Grid>\n\n                  {(isEditingDeal || userRole !== agentRole || !submittedDeal.isCoAgent) && (\n                    <Fragment>\n                      <div\n                        className={`${classes.formSubheading} ${\n                          classes.paddingBottom10\n                        }`}\n                      >\n                        <Typography\n                          variant=\"subheading\"\n                          classes={{ subheading: classes.h3 }}\n                        >\n                          Transaction Financials\n                        </Typography>\n                      </div>\n\n                      <div className={classes.formMiniHeading}>\n                        <Typography\n                          variant=\"subheading\"\n                          classes={{\n                            subheading: classes.h4,\n                            root: classes.greenText,\n                          }}\n                        >\n                          Paid:\n                        </Typography>\n                      </div>\n\n                      <NestedField field={['paymentItems', 0]}>\n                        <Grid item sm={4} xs={12}>\n                          <div className={classes.formControlWrapper}>\n                            <MaterialCustomSelectInput\n                              field=\"paymentType\"\n                              id={uuid()}\n                              required\n                              fullWidth\n                              label=\"Payment Type\"\n                              name=\"paymentType\"\n                              selectInputItems={paymentTypeSelectItems}\n                              validate={paymentTypeValidator}\n                              disabled={submittedDeal && !isEditingDeal}\n                            />\n                          </div>\n                        </Grid>\n\n                        <Grid item sm={4} xs={12}>\n                          <div className={classes.formControlWrapper}>\n                            <CustomTextField\n                              field=\"checkOrTransactionNumber\"\n                              id={uuid()}\n                              label=\"Check/Transaction#\"\n                              required\n                              fullWidth\n                              validate={checkOrTransactionNumberValidator}\n                              disabled={submittedDeal && !isEditingDeal}\n                            />\n                          </div>\n                        </Grid>\n\n                        <Grid item sm={4} xs={12}>\n                          <div className={classes.formControlWrapper}>\n                            <CustomTextField\n                              field=\"amount\"\n                              id={uuid()}\n                              label=\"Amount\"\n                              required\n                              fullWidth\n                              validate={paymentAmountValidator}\n                              noLetters\n                              noNegativeSign\n                              onChangeWithID={this.props.paymentAmountChangeHandler}\n                              isDollarAmount\n                              disabled={submittedDeal && !isEditingDeal}\n                            />\n                          </div>\n                        </Grid>\n                      </NestedField>\n\n                      {formApi.values.paymentItems\n                      && formApi.values.paymentItems\n                        .map((paymentItems, i) => (\n                          <div className={classes.paymentItemsWrapper} key={i}>\n                            <NestedField field={['paymentItems', i]}>\n                              <Grid item sm={4} xs={12}>\n                                <div className={classes.formControlWrapper}>\n                                  <MaterialCustomSelectInput\n                                    field=\"paymentType\"\n                                    id={uuid()}\n                                    required\n                                    fullWidth\n                                    label=\"Payment Type\"\n                                    name=\"paymentType\"\n                                    selectInputItems={paymentTypeSelectItems}\n                                    validate={paymentTypeValidator}\n                                    disabled={submittedDeal && !isEditingDeal}\n                                  />\n                                </div>\n                              </Grid>\n\n                              <Grid item sm={4} xs={12}>\n                                <div className={classes.formControlWrapper}>\n                                  <CustomTextField\n                                    field=\"checkOrTransactionNumber\"\n                                    id={uuid()}\n                                    label=\"Check/Transaction#\"\n                                    required\n                                    fullWidth\n                                    validate={checkOrTransactionNumberValidator}\n                                    disabled={submittedDeal && !isEditingDeal}\n                                  />\n                                </div>\n                              </Grid>\n\n                              <Grid item sm={4} xs={12}>\n                                <div className={classes.formControlWrapper}>\n                                  <CustomTextField\n                                    field=\"amount\"\n                                    id={uuid()}\n                                    label=\"Amount\"\n                                    required\n                                    fullWidth\n                                    validate={paymentAmountValidator}\n                                    noLetters\n                                    noNegativeSign\n                                    onChangeWithID={\n                                      this.props.paymentAmountChangeHandler\n                                    }\n                                    isDollarAmount\n                                    disabled={submittedDeal && !isEditingDeal}\n                                  />\n                                </div>\n                              </Grid>\n                            </NestedField>\n                            {submittedDeal && !isEditingDeal ? null : (\n                              <Button\n                                classes={{ root: classes.removePaymentBtn }}\n                                variant=\"raised\"\n                                color=\"secondary\"\n                                onClick={() => {\n                                  const amount = Number(\n                                    formApi.values.paymentItems[i].amount\n                                  );\n\n                                  if (amount) {\n                                    subtractPaymentValueFromState(amount);\n                                  }\n\n                                  formApi.removeValue('paymentItems', i);\n                                }}\n                                type=\"button\"\n                              >\n                                Remove\n                              </Button>\n                            )}\n                          </div>\n                        ))\n                        .slice(1)}\n                      <Grid item xs={12}>\n                        <Button\n                          classes={{ root: classes.addPaymentBtn }}\n                          variant=\"raised\"\n                          color=\"primary\"\n                          onClick={() => formApi.addValue('paymentItems')}\n                          type=\"button\"\n                          disabled={submittedDeal && !isEditingDeal}\n                        >\n                          Add payment item\n                        </Button>\n                      </Grid>\n\n                      <Grid item xs={12} sm={6}>\n                        <div className={classes.formControlWrapper}>\n                          <CustomTextField\n                            field=\"paymentsSubtotal\"\n                            id={uuid()}\n                            label=\"Payments Subtotal\"\n                            disabled\n                            fullWidth\n                            submittedValue={this.props.paymentsTotal}\n                            formApi={formApi}\n                            convertToLocaleString\n                            isDollarAmount\n                          />\n                        </div>\n                      </Grid>\n                    </Fragment>\n                  )}\n\n                  <div className={classes.formMiniHeading2}>\n                    <Typography\n                      variant=\"subheading\"\n                      classes={{\n                        subheading: classes.h4,\n                        root: classes.redText,\n                      }}\n                    >\n                      Deductions:\n                    </Typography>\n                  </div>\n\n                  {this.state.shouldRenderInitialDeductionItem ? (\n                    <div className={classes.paymentItemsWrapper}>\n                      <NestedField field={['deductionItems', 0]}>\n                        <Grid item sm={rowSize} xs={12}>\n                          <div className={classes.formControlWrapper}>\n                            <MaterialCustomSelectInput\n                              field=\"deductionType\"\n                              id={uuid()}\n                              fullWidth\n                              label=\"Deduction Type\"\n                              name=\"deductionType\"\n                              required\n                              selectInputItems={deductionTypeSelectItems}\n                              validate={deductionTypeValidator}\n                              disabled={submittedDeal && !isEditingDeal}\n                            />\n                          </div>\n                        </Grid>\n\n                        {canRenderSplitAgentId && (\n                          <Grid item sm={rowSize} xs={12}>\n                            <div className={classes.formControlWrapper}>\n                              <MaterialCustomSelectInput\n                                field=\"agentID\"\n                                id={uuid()}\n                                fullWidth\n                                label=\"Select Agent\"\n                                name=\"agentID\"\n                                required\n                                disabled={(submittedDeal && !isEditingDeal) || isViewType}\n                                selectInputItems={agentsSelectItems}\n                              />\n                            </div>\n                          </Grid>\n                        )}\n\n                        <Grid item sm={rowSize} xs={12}>\n                          <div className={classes.formControlWrapper}>\n                            <CustomTextField\n                              field=\"description\"\n                              id={uuid()}\n                              label=\"Description\"\n                              fullWidth\n                              required\n                              validate={descriptionValidator}\n                              disabled={submittedDeal && !isEditingDeal}\n                            />\n                          </div>\n                        </Grid>\n\n                        <Grid item sm={rowSize} xs={12}>\n                          <div className={classes.formControlWrapper}>\n                            <CustomTextField\n                              field=\"amount\"\n                              id={uuid()}\n                              label=\"Amount\"\n                              fullWidth\n                              validate={deductionsAmountValidator}\n                              noLetters\n                              required\n                              noNegativeSign\n                              onChangeWithID={\n                                this.props.deductionAmountChangeHandler\n                              }\n                              isDollarAmount\n                              disabled={submittedDeal && !isEditingDeal}\n                            />\n                          </div>\n                        </Grid>\n                      </NestedField>\n                      {submittedDeal && !isEditingDeal ? null : (\n                        <Button\n                          classes={{ root: classes.removePaymentBtn }}\n                          variant=\"raised\"\n                          color=\"secondary\"\n                          onClick={() => {\n                            this.setState({\n                              shouldRenderInitialDeductionItem: false,\n                            });\n                            const amount = Number(\n                              formApi.values.deductionItems[0].amount\n                            );\n\n                            if (amount) {\n                              subtractDeductionValueFromState(amount);\n                            }\n                            formApi.removeValue('deductionItems', 0);\n                          }}\n                          type=\"button\"\n                        >\n                          Remove\n                        </Button>\n                      )}\n                    </div>\n                  ) : null}\n\n                  {this.renderRestDeductionItems(formApi, agentsSelectItems)}\n                  <Grid item xs={12}>\n                    <Button\n                      classes={{ root: classes.addPaymentBtn }}\n                      variant=\"raised\"\n                      color=\"primary\"\n                      onClick={() => formApi.addValue('deductionItems')}\n                      type=\"button\"\n                      disabled={submittedDeal && !isEditingDeal}\n                    >\n                      Add deduction item\n                    </Button>\n                  </Grid>\n\n                  <Grid item xs={12} sm={6}>\n                    <div className={classes.formControlWrapper}>\n                      <CustomTextField\n                        field=\"deductionsSubtotal\"\n                        id={uuid()}\n                        label=\"Deductions Subtotal\"\n                        disabled\n                        fullWidth\n                        submittedValue={`${this.props.deductionsTotal}`}\n                        formApi={formApi}\n                        convertToLocaleString\n                        isDollarAmount\n                      />\n                    </div>\n                  </Grid>\n\n                  <Grid item xs={12}>\n                    <div className={classes.formControlWrapper}>\n                      <CustomTextField\n                        field=\"financialsTotal\"\n                        id={uuid()}\n                        label=\"Final Total\"\n                        disabled\n                        fullWidth\n                        labelClassName={classes.finalTotalLabelClass}\n                        submittedValue={`${this.props.total}`}\n                        formApi={formApi}\n                        convertToLocaleString\n                        isDollarAmount\n                        inputRootClassName={classes.finalTotalInputClass}\n                      />\n                    </div>\n                  </Grid>\n\n                  <Grid item xs={12}>\n                    <div className={classes.formControlWrapper}>\n                      <CustomTextField\n                        field=\"agentNotes\"\n                        id={uuid()}\n                        label=\"Listing agent/performance bonus info\"\n                        fullWidth\n                        multiline\n                        disabled={submittedDeal && !isEditingDeal}\n                      />\n                    </div>\n                  </Grid>\n\n                  <div className={classes.formMiniHeading2}>\n                    <Typography\n                      variant=\"subheading\"\n                      classes={{ subheading: classes.h4 }}\n                    >\n                      File Uploads:\n                    </Typography>\n                  </div>\n\n                  <Grid item xs={12}>\n                    <Divider />\n                  </Grid>\n\n                  <Grid item xs={12}>\n                    <div className={classes.fileUploadBtnWrapper}>\n                      <CustomFileUploadInputBtn\n                        field=\"agencyDisclosureForm\"\n                        id=\"agencyDisclosureUploadForm\"\n                        label=\"Upload Agency Disclosure Form*\"\n                        btnClassName={classes.uploadBtnClassName}\n                        customOnChange={setAgencyDisclosureForm}\n                        customState={agencyDisclosureForm}\n                        helperInfo=\"Agency Disclosure Form* (PDF or JPEG/JPG file)\"\n                        acceptedFileExtensions={acceptedFileExtensions}\n                        accept=\".jpeg, .jpg, .pdf\"\n                        disabled={submittedDeal && !isEditingDeal}\n                        required={isViewType ? undefined : true}\n                        submits={formApi.submits}\n                        formError={\n                          formApi.errors\n                            ? formApi.errors.agencyDisclosureForm\n                            : undefined\n                        }\n                        validate={\n                          isViewType ? undefined : agencyDisclosureFormValidator\n                        }\n                      />\n                      {submittedDeal\n                      && submittedDeal.agencyDisclosureForm\n                      && !agencyDisclosureForm ? (\n                          <Button\n                            variant=\"fab\"\n                            color=\"primary\"\n                            aria-label=\"add\"\n                            size=\"small\"\n                            classes={{ root: classes.smallFileViewBtn }}\n                            onClick={this.handleAgencyDisclosureMenuClick}\n                          >\n                            <EyeIcon className={classes.viewIcon} />\n                          </Button>\n                        ) : null}\n                      {isEditingDeal && agencyDisclosureForm ? (\n                        <Button\n                          variant=\"fab\"\n                          color=\"secondary\"\n                          aria-label=\"add\"\n                          size=\"small\"\n                          classes={{ root: classes.smallFileRemoveBtn }}\n                          onClick={() => {\n                            setAgencyDisclosureForm('');\n                          }}\n                        >\n                          <DeleteIcon />\n                        </Button>\n                      ) : null}\n                    </div>\n                  </Grid>\n\n                  <Grid item xs={12}>\n                    <div className={classes.fileUploadBtnWrapper}>\n                      <CustomFileUploadInputBtn\n                        field=\"contractOrLeaseItems\"\n                        id=\"contractOrLeaseItemsUploadForm\"\n                        label=\"Upload your Contract or Lease items\"\n                        btnClassName={classes.uploadBtnClassName}\n                        multiple\n                        customOnChange={setContractOrLeaseForms}\n                        customState={contractOrLeaseForms}\n                        helperInfo=\"Contract or Lease items (PDF or JPEG/JPG files)\"\n                        acceptedFileExtensions={acceptedFileExtensions}\n                        accept=\".jpeg, .jpg, .pdf\"\n                        disabled={submittedDeal && !isEditingDeal}\n                      />\n                      {submittedDeal\n                      && submittedDeal.contractOrLeaseForms\n                      && submittedDeal.contractOrLeaseForms.length\n                      && !(contractOrLeaseForms && contractOrLeaseForms.length) ? (\n                          <Button\n                            variant=\"fab\"\n                            color=\"primary\"\n                            aria-label=\"add\"\n                            size=\"small\"\n                            classes={{ root: classes.smallFileViewBtn }}\n                            onClick={this.handleContractLeaseMenuClick}\n                          >\n                            <EyeIcon className={classes.viewIcon} />\n                          </Button>\n                        ) : null}\n                      {contractOrLeaseForms.length ? (\n                        <Button\n                          variant=\"fab\"\n                          color=\"secondary\"\n                          aria-label=\"add\"\n                          size=\"small\"\n                          classes={{ root: classes.smallFileRemoveBtn }}\n                          onClick={() => {\n                            setContractOrLeaseForms([]);\n                          }}\n                        >\n                          <DeleteIcon />\n                        </Button>\n                      ) : null}\n                    </div>\n                  </Grid>\n\n                  {/*\n                      {formApi.values.contractOrLeaseItems && formApi.values.contractOrLeaseItems.map((contractOrLeaseItem, i) => (\n                        <Grid item xs={12} key={i} classes={{ typeItem: classes.uploadContractDivWrapper }}>\n                          <div className={classes.fileUploadBtnWrapper2}>\n                            <CustomFileUploadInputBtn\n                              field={['contractOrLeaseItems', i]}\n                              id={uuid()}\n                              label=\"Upload Contract or Lease\"\n                              btnClassName={classes.uploadBtnClassName}\n                            />\n                          </div>\n                          <Button\n                            variant=\"fab\"\n                            color=\"secondary\"\n                            aria-label=\"add\"\n                            size=\"small\"\n                            classes={{ root: classes.smallFileRemoveBtn }}\n                            onClick={() => formApi.removeValue('contractOrLeaseItems', i)}\n                          >\n                            <DeleteIcon />\n                          </Button>\n                        </Grid>\n                      )).slice(1)}\n\n\n                    <Grid item xs={12}>\n                      <div className={classes.fileUploadBtnWrapper}>\n                        <Button\n                          variant=\"fab\"\n                          color=\"primary\"\n                          id=\"contractOrLease\"\n                          aria-label=\"add\"\n                          size=\"small\"\n                          classes={{ root: classes.smallFileAddBtn }}\n                          onClick={() => formApi.addValue('contractOrLeaseItems')}\n                        >\n                          <AddIcon />\n                        </Button>\n                      </div>\n                    </Grid>\n                    */}\n\n                  <div className={classes.formMiniHeading2}>\n                    <Typography\n                      variant=\"subheading\"\n                      classes={{ subheading: classes.h4 }}\n                    >\n                      Other:\n                    </Typography>\n                  </div>\n\n                  <Grid item xs={12}>\n                    <Divider />\n                  </Grid>\n\n                  <div\n                    className={`${classes.formControlWrapper} ${\n                      classes.radioInputWrapper\n                    }`}\n                  >\n                    <MaterialCustomRadioInput\n                      field=\"agentPaymentType\"\n                      id={uuid()}\n                      required\n                      label=\"How would you like to get paid?\"\n                      radioInputItems={radioInputAgentPaymentItems}\n                      onInput={this.props.onAgentPaymentTypeChange}\n                      horizontal\n                      disabled={submittedDeal && !isEditingDeal}\n                    />\n                  </div>\n\n                  {(agentPaymentTypeIsACH\n                    || (submittedDeal && submittedDeal.ACHAccountNumber)) && (\n                    <Grid item xs={12} md={6}>\n                      <div className={classes.formControlWrapper}>\n                        <CustomTextField\n                          field=\"ACHAccountNumber\"\n                          id={uuid()}\n                          label=\"ACH Account Number\"\n                          required\n                          fullWidth\n                          validate={ACHAccountNumberValidator}\n                          disabled={submittedDeal && !isEditingDeal}\n                        />\n                      </div>\n                    </Grid>\n                  )}\n\n                  {(agentPaymentTypeIsACH\n                    || (submittedDeal\n                      && submittedDeal.ACHAccountBankRoutingNumber)) && (\n                    <Grid item xs={12} md={6}>\n                      <div className={classes.formControlWrapper}>\n                        <CustomTextField\n                          field=\"ACHAccountBankRoutingNumber\"\n                          id={uuid()}\n                          label=\"ACH Account's Bank Routing Number\"\n                          required\n                          fullWidth\n                          validate={ACHAccountNumberValidator}\n                          disabled={submittedDeal && !isEditingDeal}\n                        />\n                      </div>\n                    </Grid>\n                  )}\n\n                  <Grid item xs={12}>\n                    <div className={classes.formControlWrapper}>\n                      <MaterialCustomSelectInput\n                        field=\"fundsPaidBy\"\n                        id={uuid()}\n                        required\n                        fullWidth\n                        label=\"Funds will/have been paid by...\"\n                        name=\"fundsPaidBy\"\n                        selectInputItems={fundsPaidBySelectItems}\n                        disabled={submittedDeal && !isEditingDeal}\n                      />\n                    </div>\n                  </Grid>\n\n                  <div\n                    className={`${classes.formControlWrapper} ${\n                      classes.radioInputWrapper\n                    }`}\n                  >\n                    <MaterialCustomRadioInput\n                      field=\"alreadyTurnedFundsIn\"\n                      id={uuid()}\n                      required\n                      label=\"Have you already deposited or given the funds to us?\"\n                      radioInputItems={radioInputYesNoItems}\n                      horizontal\n                      disabled={submittedDeal && !isEditingDeal}\n                    />\n                  </div>\n\n                  <div\n                    className={`${classes.formControlWrapper} ${\n                      classes.radioInputWrapper\n                    }`}\n                  >\n                    <MaterialCustomRadioInput\n                      field=\"shouldSendApprovalTextMessageNotification\"\n                      id={uuid()}\n                      required\n                      label=\"Want to recieve a text notification upon deal approval?\"\n                      radioInputItems={radioInputYesNoItems}\n                      horizontal\n                      disabled={submittedDeal && !isEditingDeal}\n                    />\n                  </div>\n\n                  {!this.props.userRole\n                  || !submittedDeal\n                  || (this.props.userRole === agentRole\n                    && submittedDeal.status === 'pending')\n                  || (!submittedDeal.bonusPercentageAddedByAdmin\n                    && submittedDeal.status === 'approved') ? null : (\n                      <Grid item xs={12}>\n                        <div className={classes.formControlWrapper}>\n                          <FormControl\n                            className={classnames(\n                              submittedDeal\n                            && submittedDeal.status === 'approved'\n                            && classes.disabled\n                            )}\n                            disabled={\n                              submittedDeal && submittedDeal.status === 'approved'\n                            }\n                            fullWidth\n                          >\n                            <InputLabel\n                              htmlFor=\"bonusPercentageAddedByAdmin\"\n                              className={classnames(\n                                submittedDeal\n                              && submittedDeal.status === 'approved'\n                              && classes.disabled\n                              )}\n                            >\n                            Listing agent/performance bonus\n                            </InputLabel>\n                            <Input\n                              id=\"bonusPercentageAddedByAdmin\"\n                              value={\n                                submittedDeal\n                              && submittedDeal.bonusPercentageAddedByAdmin\n                                  ? submittedDeal.bonusPercentageAddedByAdmin\n                                  : this.props.dealBonus\n                              }\n                              className={classnames(\n                                submittedDeal\n                              && submittedDeal.status === 'approved'\n                              && classes.disabled,\n                                classes.fullwidthInput\n                              )}\n                              inputProps={{\n                                onInput: this.props.onBonusChange,\n                                className:\n                                submittedDeal.status === 'approved'\n                                  ? classes.disabled\n                                  : undefined,\n                              }}\n                              startAdornment={(\n                                <InputAdornment position=\"start\">\n                                %\n                                </InputAdornment>\n                              )}\n                            />\n                          </FormControl>\n                        </div>\n                      </Grid>\n                    )}\n\n                  {submittedDeal\n                  && submittedDeal.netAgentCommission\n                  && submittedDeal.status === 'approved' ? (\n                      <Grid item xs={12}>\n                        <div className={classes.formControlWrapper}>\n                          <FormControl\n                            className={classnames(\n                              submittedDeal\n                            && submittedDeal.status === 'approved'\n                            && classes.disabled\n                            )}\n                            disabled={\n                              submittedDeal && submittedDeal.status === 'approved'\n                            }\n                            fullWidth\n                          >\n                            <InputLabel\n                              htmlFor=\"netAgentCommission\"\n                              className={classes.disabled}\n                            >\n                            Net Agent Commission\n                            </InputLabel>\n                            <Input\n                              id=\"netAgentCommission\"\n                              value={\n                                submittedDeal && submittedDeal.netAgentCommission\n                                  ? padStringToDecimalString(\n                                    Number(\n                                      submittedDeal.netAgentCommission\n                                    ).toLocaleString()\n                                  )\n                                  : null\n                              }\n                              className={classnames(\n                                classes.disabled,\n                                classes.finalTotalInputClass\n                              )}\n                              inputProps={{\n                                className: classes.disabled,\n                              }}\n                              startAdornment={(\n                                <InputAdornment position=\"start\">\n                                $\n                                </InputAdornment>\n                              )}\n                            />\n                          </FormControl>\n                        </div>\n                      </Grid>\n                    ) : null}\n\n                  {(this.props.userRole === admin\n                    || this.props.userRole === superAdmin)\n                  && submittedDeal\n                  && submittedDeal.status === 'approved' ? (\n                      <Grid item xs={12}>\n                        <div className={classes.formControlWrapper}>\n                          <FormControl\n                            className={classnames(classes.disabled)}\n                            disabled\n                            fullWidth\n                          >\n                            <InputLabel\n                              htmlFor=\"netCompanyCommission\"\n                              className={classes.disabled}\n                            >\n                            Net Company Commission\n                            </InputLabel>\n                            <Input\n                              id=\"netCompanyCommission\"\n                              value={\n                                submittedDeal\n                                  ? submittedDeal.netCompanyCommission\n                                    ? padStringToDecimalString(\n                                      Number(\n                                        submittedDeal.netCompanyCommission\n                                      ).toLocaleString()\n                                    )\n                                    : 0\n                                  : null\n                              }\n                              className={classnames(\n                                classes.disabled,\n                                classes.finalTotalInputClass\n                              )}\n                              inputProps={{\n                                className: classes.disabled,\n                              }}\n                              startAdornment={(\n                                <InputAdornment position=\"start\">\n                                $\n                                </InputAdornment>\n                              )}\n                            />\n                          </FormControl>\n                        </div>\n                      </Grid>\n                    ) : null}\n                </Grid>\n              </form>\n            );\n          }\n          }\n        </Form>\n\n        {submittingFormToServer ? (\n          <div className={classes.formSubmittingWrapper}>\n            <Icon type=\"loading\" style={{ color: '#000', fontSize: '4rem' }} />\n            <div className={classes.progressBarExplanation}>\n              Finishing submission...\n            </div>\n          </div>\n        ) : null}\n\n        {isUploadingFile ? (\n          <div className={classes.progressBarWrapper}>\n            <CircularProgressbar\n              className={classes.progressBar}\n              percentage={uplodingFileProgress}\n              styles={{\n                path: {\n                  stroke: `rgba(62, 152, 199, ${uplodingFileProgress / 100})`,\n                },\n              }}\n            />\n            <div className={classes.progressBarExplanation}>\n              {uplodingFileText || 'Uploading file picture...'}\n            </div>\n          </div>\n        ) : null}\n\n        <Lightbox\n          images={this.state.currentLightboxItem}\n          isOpen={this.state.lightboxIsOpen}\n          onClose={this.closeLightbox}\n          onClickPrev={this.onClickPrev}\n          onClickNext={this.onClickNext}\n          currentImage={this.state.currentLightBoxIndex}\n          backdropClosesModal\n          customControls={[this.returnDownloadFileBtn()]}\n        />\n      </div>\n    );\n  }\n}\n\nexport default withStyles(styles)(SubmitDealForm);\n\n\n\n// WEBPACK FOOTER //\n// src/components/forms/SubmitDealForm/index.js"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAUA;AAKA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AADA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA;AAYA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AAHA;AAKA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AANA;AAWA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AArBA;AAuBA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AADA;AARA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AADA;AAZA;AAgBA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AADA;AAGA;AACA;AACA;AAFA;AAIA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAjBA;AAqBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAnBA;AAqBA;AACA;AACA;AAFA;AA3QA;AAAA;AACA;AAgRA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAGA;AACA;AAAA;AACA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAGA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAGA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAGA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AAgCA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AADA;AAIA;AACA;AAhDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAkDA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AAlEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAqEA;AACA;AACA;AACA;AACA;AAJA;AAMA;AA3EA;AAAA;AAAA;AAAA;AAAA;AAAA;AA8EA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AArFA;AAAA;AAAA;AAAA;AAAA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","sourceRoot":""}