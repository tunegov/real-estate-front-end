{"version":3,"file":"10.89e8c8fa17a36d77324b.hot-update.js","sources":["webpack:///src/containers/DealsSummary.js"],"sourcesContent":["import React, { Component } from 'react';\nimport { observer } from 'mobx-react';\nimport moment from 'moment';\nimport setValue from 'set-value';\nimport DealsSummary from '../components/DealsSummary';\nimport {\n  residentialRental,\n  residentialSale,\n  commercialRental,\n  commercialSale,\n} from '../constants/dealTypes';\nimport { round } from '../utils/Math';\nimport {\n  returnMonthlyDollarDataContainer,\n  returnMonthlyDealNumberDataContainer,\n  returnNumberDealsDataContainer,\n  returnYearlyDollarDealsDataContainer,\n} from '../constants/graphDataModels';\nimport { toLocaleCurrency } from '../utils/currency';\n\nconst get = (p, o) => p.reduce((xs, x) => (xs && xs[x] ? xs[x] : null), o);\n\nconst returnGraphDealType = deal => {\n  let graphDealType;\n\n  switch (deal.dealType) {\n    case commercialRental:\n      graphDealType = 'Com Rentals';\n      break;\n    case commercialSale:\n      graphDealType = 'Com Sales';\n      break;\n    case residentialRental:\n      graphDealType = 'Res Sales';\n      break;\n    case residentialSale:\n      graphDealType = 'Res Rentals';\n      break;\n    default:\n      return null;\n  }\n  return graphDealType;\n};\n\nconst returnGraphMonth = month => {\n  const months = [\n    'Jan',\n    'Feb',\n    'Mar',\n    'Apr',\n    'May',\n    'Jun',\n    'Jul',\n    'Aug',\n    'Sep',\n    'Oct',\n    'Nov',\n    'Dec',\n  ];\n\n  return months[month];\n};\n\n@observer\nclass DealsSummaryContainer extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {};\n  }\n\n  returnNumberOfTotalDealsData = (deals = []) => {\n    if (!deals.length) return false;\n\n    if (!deals.some(deal => deal.status !== 'pending')) return false;\n\n    const dealDataCounts = {\n      'Res. Sales': 0,\n      'Res. Rentals': 0,\n      'Com. Sales': 0,\n      'Com. Rentals': 0,\n    };\n\n    if (deals && Array.isArray(deals)) {\n      deals.forEach(deal => {\n        if (deal.status === 'pending') return;\n\n        switch (deal.dealType) {\n          case commercialRental:\n            dealDataCounts['Com. Rentals'] += 1;\n            break;\n          case commercialSale:\n            dealDataCounts['Com. Sales'] += 1;\n            break;\n          case residentialRental:\n            dealDataCounts['Res. Rentals'] += 1;\n            break;\n          case residentialSale:\n            dealDataCounts['Res. Sales'] += 1;\n            break;\n          default:\n        }\n      });\n    }\n\n    const dealData = [\n      {\n        id: 'Res. Sales',\n        label: 'Res. Sales',\n        value: dealDataCounts['Res. Sales'] || 0,\n      },\n      {\n        id: 'Res. Rentals',\n        label: 'Res. Rentals',\n        value: dealDataCounts['Res. Rentals'] || 0,\n      },\n      {\n        id: 'Com. Sales',\n        label: 'Com. Sales',\n        value: dealDataCounts['Com. Sales'] || 0,\n      },\n      {\n        id: 'Com. Rentals',\n        label: 'Com. Rentals',\n        value: dealDataCounts['Com. Rentals'] || 0,\n      },\n    ];\n\n    return dealData;\n  };\n\n  returnGrossDollarAmtOfTotalDealsData = (deals = []) => {\n    if (!deals.length) return false;\n\n    if (!deals.some(deal => deal.status !== 'pending')) return false;\n\n    const dealDataCounts = {\n      'Res. Sales': 0,\n      'Res. Rentals': 0,\n      'Com. Sales': 0,\n      'Com. Rentals': 0,\n    };\n\n    if (deals) {\n      deals.forEach(deal => {\n        if (deal.status === 'pending') return;\n\n        switch (deal.dealType) {\n          case commercialRental:\n            dealDataCounts['Com. Rentals'] += deal.total;\n            break;\n          case commercialSale:\n            dealDataCounts['Com. Sales'] += deal.total;\n            break;\n          case residentialRental:\n            dealDataCounts['Res. Rentals'] += deal.total;\n            break;\n          case residentialSale:\n            dealDataCounts['Res. Sales'] += deal.total;\n            break;\n          default:\n        }\n      });\n    }\n\n    const dealsGrossDollarData = [\n      {\n        id: 'Res. Sales',\n        label: 'Res. Sales',\n        value: dealDataCounts['Res. Sales'] || 0,\n      },\n      {\n        id: 'Res. Rentals',\n        label: 'Res. Rentals',\n        value: dealDataCounts['Res. Rentals'] || 0,\n      },\n      {\n        id: 'Com. Sales',\n        label: 'Com. Sales',\n        value: dealDataCounts['Com. Sales'] || 0,\n      },\n      {\n        id: 'Com. Rentals',\n        label: 'Com. Rentals',\n        value: dealDataCounts['Com. Rentals'] || 0,\n      },\n    ];\n\n    return dealsGrossDollarData;\n  };\n\n  returnNumberOfPendingDeals = (deals = []) => {\n    const numOfPendingDeals = deals.reduce((pendingDeals, deal) => {\n      if (deal.status === 'pending') {\n        return (pendingDeals += 1);\n      }\n\n      return pendingDeals;\n    }, 0);\n\n    return numOfPendingDeals || 0;\n  };\n\n  returnGrossDealCommissions = (deals = []) => toLocaleCurrency(deals.reduce((grossAmount, deal) => {\n    if (deal.status === 'pending') return grossAmount;\n\n    return grossAmount += deal.total;\n  }, 0));\n\n  returnNetCurrentYearDealCommissions = (deals = []) => toLocaleCurrency(deals.reduce((grossAmount, deal) => {\n    if (deal.status === 'pending') return grossAmount;\n    if (moment(deal.date).year() !== moment().year()) return grossAmount;\n\n    return grossAmount += deal.netAgentCommission;\n  }, 0));\n\n  returnMonthlyAndYearlyDealsData = (deals = []) => {\n    const monthlyDollarData = returnMonthlyDollarDataContainer();\n    const monthlyDealNumberData = returnMonthlyDealNumberDataContainer();\n    const yearlyDollarData = returnNumberDealsDataContainer();\n    const yearlyDealNumberData = returnYearlyDollarDealsDataContainer();\n\n    deals.forEach(deal => {\n      if (deal.status === 'pending') return;\n\n      const month = moment(deal.date).month();\n      const year = moment(deal.date).year();\n      const currentYear = moment().year();\n      const yearLimit = currentYear - 4;\n\n      // monthlyDollarData\n      if (\n        get(\n          [returnGraphMonth(month), returnGraphDealType(deal)],\n          monthlyDollarData\n        )\n      ) {\n        monthlyDollarData[returnGraphMonth(month)][\n          returnGraphDealType(deal)\n        ] += round(deal.netAgentCommission / 1000);\n      } else {\n        setValue(\n          monthlyDollarData,\n          `${returnGraphMonth(month)}.${returnGraphDealType(deal)}`,\n          round(deal.netAgentCommission / 1000)\n        );\n      }\n\n      // monthlyDealNumberData\n      if (\n        get(\n          [returnGraphMonth(month), returnGraphDealType(deal)],\n          monthlyDealNumberData\n        )\n      ) {\n        monthlyDealNumberData[returnGraphMonth(month)][\n          returnGraphDealType(deal)\n        ] += 1;\n      } else {\n        setValue(\n          monthlyDealNumberData,\n          `${returnGraphMonth(month)}.${returnGraphDealType(deal)}`,\n          1\n        );\n      }\n\n      if (year >= yearLimit) {\n        // yearlyDollarData\n        if (get([year, returnGraphDealType(deal)], yearlyDollarData)) {\n          yearlyDollarData[year][returnGraphDealType(deal)] += round(\n            deal.netAgentCommission / 1000\n          );\n        } else {\n          setValue(\n            yearlyDollarData,\n            `${year}.${returnGraphDealType(deal)}`,\n            round(deal.netAgentCommission / 1000)\n          );\n        }\n\n        // yearlyDealNumberData\n        if (get([year, returnGraphDealType(deal)], yearlyDealNumberData)) {\n          yearlyDealNumberData[year][returnGraphDealType(deal)] += 1;\n        } else {\n          setValue(\n            yearlyDealNumberData,\n            `${year}.${returnGraphDealType(deal)}`,\n            1\n          );\n        }\n      }\n    });\n\n    return {\n      monthlyDollarData,\n      monthlyDealNumberData,\n      yearlyDollarData,\n      yearlyDealNumberData,\n    };\n  };\n\n  generateDealsBarData = data => Object.keys(data).map(month => ({\n    month,\n    'Com Sales': data[month]['Com Sales'],\n    'Com Rentals': data[month]['Com Rentals'],\n    'Res Sales': data[month]['Res Sales'],\n    'Res Rentals': data[month]['Res Rentals'],\n  }));\n\n  generateDealsLineData = data => {\n    const types = ['Com Sales', 'Com Rentals', 'Res Sales', 'Res Rentals'];\n\n    return types.map(id => ({\n      id,\n      data: Object.keys(data).map(month => ({\n        x: month,\n        y: data[month][id],\n      })),\n    }));\n  };\n\n  returnAllGraphData = deals => {\n    const {\n      monthlyDollarData,\n      monthlyDealNumberData,\n      yearlyDollarData,\n      yearlyDealNumberData,\n    } = this.returnMonthlyAndYearlyDealsData(deals);\n\n    return {\n      monthlyDealsDollarBarData: this.generateDealsBarData(monthlyDollarData),\n      monthlyDealsNumberBarData: this.generateDealsBarData(\n        monthlyDealNumberData\n      ),\n      monthlyDealsDollarLineData: this.generateDealsLineData(monthlyDollarData),\n      monthlyDealsNumberLineData: this.generateDealsLineData(\n        monthlyDealNumberData\n      ),\n      yearlyDealsDollarBarData: this.generateDealsBarData(yearlyDollarData),\n      yearlyDealsNumberBarData: this.generateDealsBarData(yearlyDealNumberData),\n      yearlyDealsDollarLineData: this.generateDealsLineData(yearlyDollarData),\n      yearlyDealsNumberLineData: this.generateDealsLineData(\n        yearlyDealNumberData\n      ),\n    };\n  };\n\n  render() {\n    const { deals } = this.props;\n\n    const {\n      monthlyDealsDollarBarData,\n      monthlyDealsNumberBarData,\n      monthlyDealsDollarLineData,\n      monthlyDealsNumberLineData,\n      yearlyDealsDollarBarData,\n      yearlyDealsNumberBarData,\n      yearlyDealsDollarLineData,\n      yearlyDealsNumberLineData,\n    } = this.returnAllGraphData(deals);\n\n    return (\n      <div>\n        <DealsSummary\n          userUUID={this.props.userUUID}\n          numberOfTotalDealsData={this.returnNumberOfTotalDealsData(deals)}\n          grossDollarAmtOfTotalDealsData={this.returnGrossDollarAmtOfTotalDealsData(\n            deals\n          )}\n          numberOfPendingDeals={this.returnNumberOfPendingDeals(deals)}\n          grossDealCommissions={this.returnGrossDealCommissions(deals)}\n          netCurrentYearDealCommissions={this.returnNetCurrentYearDealCommissions(\n            deals\n          )}\n          monthlyDealsDollarBarData={monthlyDealsDollarBarData}\n          monthlyDealsNumberBarData={monthlyDealsNumberBarData}\n          monthlyDealsDollarLineData={monthlyDealsDollarLineData}\n          monthlyDealsNumberLineData={monthlyDealsNumberLineData}\n          yearlyDealsDollarBarData={yearlyDealsDollarBarData}\n          yearlyDealsNumberBarData={yearlyDealsNumberBarData}\n          yearlyDealsDollarLineData={yearlyDealsDollarLineData}\n          yearlyDealsNumberLineData={yearlyDealsNumberLineData}\n        />\n      </div>\n    );\n  }\n}\n\nexport default DealsSummaryContainer;\n\n\n\n// WEBPACK FOOTER //\n// src/containers/DealsSummary.js"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AAMA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAdA;AACA;AAeA;AACA;AACA;AACA;AACA;AAeA;AACA;AACA;AAEA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AAMA;AACA;AAEA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAJA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAbA;AAeA;AACA;AACA;AACA;AAEA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAOA;AACA;AAhEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAkEA;AACA;AAEA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAJA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAbA;AAeA;AACA;AACA;AACA;AAEA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAOA;AACA;AA5HA;AAAA;AAAA;AAAA;AAAA;AAAA;AA8HA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAxIA;AAAA;AAAA;AAAA;AAAA;AAAA;AA0IA;AAAA;AACA;AAEA;AACA;AAJA;AA1IA;AAAA;AAAA;AAAA;AAAA;AAAA;AAgJA;AAAA;AACA;AACA;AAEA;AACA;AALA;AAhJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAuJA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAMA;AAGA;AACA;AAKA;AACA;AACA;AACA;AAMA;AAGA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAJA;AAMA;AA1OA;AAAA;AAAA;AAAA;AAAA;AAAA;AA4OA;AAAA;AACA;AACA;AACA;AACA;AACA;AALA;AAAA;AAAA;AA5OA;AAAA;AAAA;AAAA;AAAA;AAAA;AAqPA;AAEA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAFA;AAAA;AAFA;AAAA;AAOA;AA9PA;AAAA;AAAA;AAAA;AAAA;AAAA;AAgQA;AAAA;AAAA;AAAA;AAAA;AACA;AAOA;AACA;AACA;AAGA;AACA;AAGA;AACA;AACA;AACA;AAZA;AAgBA;AAxRA;AAGA;AAHA;AAIA;AACA;;;AAqRA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAaA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAGA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAlBA;AAAA;AAAA;AAAA;AAAA;AAsBA;;;;;;;;;;;AAjUA;AACA;AAmUA;AAAA;;;;;;;;;;;;AAhXA;AAEA;AAsBA;AAoBA;;;;;;;;;;A","sourceRoot":""}