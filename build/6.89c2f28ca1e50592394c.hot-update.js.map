{"version":3,"file":"6.89c2f28ca1e50592394c.hot-update.js","sources":["webpack:///../node_modules/antd/lib/icon/index.js","webpack:///src/components/InnerAppLayout/index.js","webpack:///src/components/forms/SubmitInvoiceForm/index.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _extends2 = require('babel-runtime/helpers/extends');\n\nvar _extends3 = _interopRequireDefault(_extends2);\n\nvar _defineProperty2 = require('babel-runtime/helpers/defineProperty');\n\nvar _defineProperty3 = _interopRequireDefault(_defineProperty2);\n\nvar _react = require('react');\n\nvar React = _interopRequireWildcard(_react);\n\nvar _classnames = require('classnames');\n\nvar _classnames2 = _interopRequireDefault(_classnames);\n\nvar _omit = require('omit.js');\n\nvar _omit2 = _interopRequireDefault(_omit);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar Icon = function Icon(props) {\n    var type = props.type,\n        _props$className = props.className,\n        className = _props$className === undefined ? '' : _props$className,\n        spin = props.spin;\n\n    var classString = (0, _classnames2['default'])((0, _defineProperty3['default'])({\n        anticon: true,\n        'anticon-spin': !!spin || type === 'loading'\n    }, 'anticon-' + type, true), className);\n    return React.createElement('i', (0, _extends3['default'])({}, (0, _omit2['default'])(props, ['type', 'spin']), { className: classString }));\n};\nexports['default'] = Icon;\nmodule.exports = exports['default'];\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../node_modules/antd/lib/icon/index.js\n// module id = ../node_modules/antd/lib/icon/index.js\n// module chunks = 5 6 9","import React from 'react';\nimport { withStyles } from 'material-ui/styles';\nimport { withRouter } from 'next/router';\nimport SettingsIcon from '@material-ui/icons/Settings';\nimport MomentUtils from 'material-ui-pickers/utils/moment-utils';\nimport Snackbar from 'material-ui/Snackbar';\nimport { Icon } from 'antd';\nimport MuiPickersUtilsProvider from 'material-ui-pickers/utils/MuiPickersUtilsProvider';\nimport isBrowser from 'is-browser';\nimport SideNav from '../SideNav';\nimport AdminSideNav from '../AdminSideNav';\nimport AppTopNav from '../AppTopNav';\nimport SettingsDrawer from '../SettingsDrawer';\nimport MenuDialogBox from '../MenuDialogBox';\nimport { admin, superAdmin } from '../../constants/userTypes';\n\nlet Offline = () => null;\n\nif (isBrowser) {\n  const { Offline: OfflineComp } = require('react-detect-offline');\n\n  Offline = OfflineComp;\n}\n\nconst styles = theme => ({\n  root: {\n    maxHeight: '100% !important',\n    flexGrow: 1,\n    zIndex: 1,\n    overflow: 'hidden',\n    position: 'relative',\n    display: 'flex',\n    alignContent: 'center',\n    fontFamily: theme.typography.fontFamily,\n  },\n  content: {\n    position: 'relative !important',\n    flexGrow: 1,\n    backgroundColor: theme.palette.background.default,\n    padding: theme.spacing.unit * 3,\n    minWidth: 0, // So the Typography noWrap works\n    overflow: 'auto',\n  },\n  toolbar: {\n    position: 'relative !important',\n    zIndex: '0 !important',\n    height: '56px !important',\n    '@media (min-width:0px) and (orientation: landscape)': {\n      height: '48px !important',\n    },\n    '@media (min-width:600px)': {\n      height: '64px !important',\n    },\n  },\n  topToolbar: {\n    flexDirection: 'row',\n    justifyContent: 'center',\n  },\n  settingsBtn: {\n    display: 'flex',\n    justifyContent: 'center',\n    position: 'fixed',\n    bottom: '10px',\n    right: '0',\n    height: '40px',\n    width: '40px',\n    zIndex: 10,\n    backgroundColor: 'rgba(0,0,0,.6)',\n    color: '#fff',\n    border: 'none',\n    borderRadius: '5px 0 0 5px',\n    outline: 'none',\n    boxShadow: theme.shadows[6],\n    '&:hover': {\n      cursor: 'pointer',\n    },\n  },\n  snackBar: {\n    marginTop: 10,\n  },\n  noConnectionSpinner: {\n    marginLeft: 10,\n  },\n});\n\nclass InnerAppLayout extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      navDrawerOpen: false,\n      settingsDrawerOpen: false,\n      managementModalCurrentType: null,\n      menuDialogBoxOpen: false,\n      menuDialogBoxTitle: null,\n      menuDialogBoxLinkItems: null,\n    };\n\n    const { userRole } = this.props;\n    this.isAdmin = userRole === admin || userRole === superAdmin;\n  }\n\n  toggleNavDrawer = state => {\n    this.setState({\n      navDrawerOpen:\n        typeof state === 'boolean' ? state : !this.state.navDrawerOpen,\n    });\n  };\n\n  toggleMenuDialogBoxOpen = (title, linkItems) => {\n    this.setState({\n      menuDialogBoxOpen: true,\n      menuDialogBoxTitle: title,\n      menuDialogBoxLinkItems: linkItems,\n    });\n  };\n\n  toggleMenuDialogBoxClosed = () => {\n    this.setState({\n      menuDialogBoxOpen: false,\n      menuDialogBoxTitle: null,\n      menuDialogBoxLinkItems: null,\n    });\n  };\n\n  toggleSettingsDrawer = state => {\n    this.setState({\n      settingsDrawerOpen:\n        typeof state === 'boolean' ? state : !this.state.settingsDrawerOpen,\n    });\n  };\n\n  renderSideNav = () => {\n    const { logoutUser, userRole } = this.props;\n    const currentPath = this.props.router.pathname;\n\n    if (this.isAdmin) {\n      return (\n        <AdminSideNav\n          currentPath={currentPath}\n          drawerOpen={this.state.navDrawerOpen}\n          toggleDrawer={this.toggleNavDrawer}\n          logoutUser={logoutUser}\n          toggleManagementModal={this.toggleManagementModal}\n          toggleMenuDialogBoxOpen={this.toggleMenuDialogBoxOpen}\n        />\n      );\n    }\n    return (\n      <SideNav\n        currentPath={currentPath}\n        drawerOpen={this.state.navDrawerOpen}\n        toggleDrawer={this.toggleNavDrawer}\n        logoutUser={logoutUser}\n        toggleMenuDialogBoxOpen={this.toggleMenuDialogBoxOpen}\n      />\n    );\n  };\n\n  render() {\n    const { classes, logoutUser, toggleFullScreenLoader } = this.props;\n    const currentPath = this.props.router.pathname;\n    const { isAdmin } = this;\n    const {\n      menuDialogBoxOpen,\n      menuDialogBoxTitle,\n      menuDialogBoxLinkItems,\n    } = this.state;\n\n    return (\n      <MuiPickersUtilsProvider utils={MomentUtils}>\n        <div className={classes.root}>\n          <AppTopNav\n            currentPath={currentPath}\n            logoutUser={logoutUser}\n            toggleDrawer={this.toggleNavDrawer}\n            isAdmin={isAdmin}\n          />\n          {this.renderSideNav()}\n          <main className={classes.content} id=\"inner-app-content\">\n            <div className={classes.toolbar} id=\"toolbar-helper\" />\n            {this.props.children}\n            {/*<div className={classes.drawerWrapper}>\n              <button\n                className={classes.settingsBtn}\n                onClick={this.toggleSettingsDrawer}\n              >\n                <SettingsIcon />\n              </button>\n              <SettingsDrawer\n                isAdmin={isAdmin}\n                toggleDrawer={this.toggleSettingsDrawer}\n                toggleNavDrawer={this.toggleNavDrawer}\n                drawerOpen={this.state.settingsDrawerOpen}\n                navDrawerOpen={this.state.navDrawerOpen}\n                toggleFullScreenLoader={toggleFullScreenLoader}\n                managementModalCurrentType={\n                  this.state.managementModalCurrentType\n                }\n              />\n              </div>*/}\n          </main>\n        </div>\n        {isBrowser && (\n          <Offline>\n            <Snackbar\n              classes={{ root: classes.snackBar }}\n              anchorOrigin={{\n                vertical: 'top',\n                horizontal: 'center',\n              }}\n              open={true}\n              onClose={this.handleCloseSnackbar}\n              message={\n                <span id=\"snackbar-id\">\n                  Internet connection currently unavailable\n                  <Icon\n                    className={classes.noConnectionSpinner}\n                    type=\"loading\"\n                    style={{ color: '#fff' }}\n                  />\n                </span>\n              }\n            />\n          </Offline>\n        )}\n      </MuiPickersUtilsProvider>\n    );\n  }\n}\n\nexport default withRouter(withStyles(styles)(InnerAppLayout));\n\n\n\n// WEBPACK FOOTER //\n// src/components/InnerAppLayout/index.js","import React, { Component } from 'react';\nimport { observer } from 'mobx-react';\nimport { withStyles } from 'material-ui/styles';\nimport Typography from 'material-ui/Typography';\nimport Divider from 'material-ui/Divider';\nimport Button from 'material-ui/Button';\nimport { Form, NestedField } from 'react-form';\nimport moment from 'moment';\nimport uuid from 'uuid/v4';\nimport Grid from 'material-ui/Grid';\nimport AddIcon from '@material-ui/icons/Add';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport TextField from 'material-ui/TextField';\nimport { Icon } from 'antd';\nimport MaterialCustomTextFieldWrapper from '../../MaterialCustomTextFieldWrapper';\nimport MaterialCustomRadioInputWrapper from '../../MaterialCustomRadioInputWrapper';\nimport MaterialCustomSelectInputWrapper from '../../MaterialCustomSelectInputWrapper';\nimport CustomFileUploadInputWrapper from '../../CustomFileUploadInputWrapper';\nimport { capitalize } from '../../../utils/stringUtils';\nimport validators, {\n  paymentTypeValidator,\n  checkOrTransactionNumberValidator,\n  paymentAmountValidator,\n  deductionTypeValidator,\n  descriptionValidator,\n  deductionsAmountValidator,\n} from './formValidation';\nimport CustomInputMask from '../../CustomInputMask';\n\nconst CustomTextField = MaterialCustomTextFieldWrapper;\nconst MaterialCustomRadioInput = MaterialCustomRadioInputWrapper;\nconst MaterialCustomSelectInput = MaterialCustomSelectInputWrapper;\nconst CustomFileUploadInputBtn = CustomFileUploadInputWrapper;\n\nconst acceptedFileExtensions = ['jpg', 'jpeg', 'pdf'];\n\nconst styles = theme => ({\n  container: {\n    display: 'flex',\n    flexWrap: 'wrap',\n    flexDirection: 'column',\n    alignItems: 'center',\n    justifyContent: 'center',\n    height: '100%',\n    padding: theme.spacing.unit * 3,\n    backgroundColor: '#fff',\n    borderRadius: '5px',\n    boxShadow: theme.shadows[3],\n  },\n  formControlWrapper: {\n    paddingLeft: theme.spacing.unit,\n    paddingRight: theme.spacing.unit,\n  },\n  formControl: {\n    marginLeft: 0,\n    marginRight: 0,\n  },\n  alignCenter: {\n    textAlign: 'center',\n  },\n  formHeader: {\n    marginBottom: theme.spacing.unit * 3,\n  },\n  formWrapper: {\n    paddingLeft: theme.spacing.unit * 4,\n    paddingRight: theme.spacing.unit * 4,\n    textAlign: 'center',\n    overflow: 'hidden',\n  },\n  formRoot: {\n    paddingBottom: 10,\n    overflow: 'hidden',\n    flexGrow: 1,\n    justifyContent: 'center',\n  },\n  radioInputWrapper: {\n    marginLeft: 'auto',\n    marginRight: 'auto',\n  },\n  formSubheading: {\n    width: '100%',\n    textAlign: 'center',\n    paddingTop: '82px',\n  },\n  h3: {\n    fontWeight: theme.typography.fontWeightMedium,\n  },\n  addPaymentBtn: {\n    marginTop: '10px',\n  },\n  removePaymentBtn: {\n    marginTop: '5px',\n    marginLeft: '28px',\n  },\n  paymentItemsWrapper: {\n    display: 'flex',\n    width: '100%',\n    padding: '5px 0 12px 0',\n    flexWrap: 'wrap',\n    boxSizing: 'border-box',\n    '& > div': {\n      paddingLeft: '12px',\n      paddingRight: '12px',\n    },\n  },\n  formMiniHeading: {\n    width: '100%',\n    textAlign: 'left',\n    paddingLeft: '28px',\n  },\n  formMiniHeading2: {\n    width: '100%',\n    textAlign: 'left',\n    paddingLeft: '28px',\n    marginTop: '60px',\n  },\n  topPaymentMethodWrapper: {\n    paddingTop: '0',\n  },\n  paddingBottom10: {\n    paddingBottom: '15px',\n  },\n  greenText: {\n    color: '#448A19',\n  },\n  redText: {\n    color: '#ED462F',\n  },\n  blueText: {\n    color: '#3878D8',\n  },\n  financialsTotal: {\n    backgroundColor: 'rgba(0,0,0,.12)',\n  },\n  uploadBtnClassName: {\n    color: '#fff',\n    backgroundColor: '#272A2E',\n    boxShadow:\n      '0px 1px 5px 0px rgba(0, 0, 0, 0.2), 0px 2px 2px 0px rgba(0, 0, 0, 0.14), 0px 3px 1px -2px rgba(0, 0, 0, 0.12)',\n    padding: '8px 16px',\n    minWidth: '88px',\n    fontSize: '0.875rem',\n    boxSizing: 'border-box',\n    minHeight: '36px',\n    transition:\n      'background-color 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms,box-shadow 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms',\n    lineHeight: '1.4em',\n    fontFamily: '\"Roboto\", \"Helvetica\", \"Arial\", sans-serif',\n    fontWeight: '500',\n    borderRadius: '2px',\n    textTransform: 'uppercase',\n    cursor: 'pointer',\n    '&:hover': {\n      backgroundColor: '#000',\n    },\n    addUploadBtnClassName: {},\n  },\n  fileUploadBtnWrapper2: {\n    display: 'inline-block',\n  },\n  smallFileAddBtn: {\n    width: '40px',\n    height: '40px',\n    minWidth: '40px',\n    minHeight: '40px',\n    backgroundColor: '#2995F3',\n    transition:\n      'background-color 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms,box-shadow 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms',\n    '&:hover': {\n      backgroundColor: '#2483D6',\n    },\n  },\n  smallFileRemoveBtn: {\n    width: '40px',\n    height: '40px',\n    minWidth: '40px',\n    minHeight: '40px',\n    position: 'absolute',\n    top: '18px',\n  },\n  uploadContractDivWrapper: {\n    position: 'relative',\n  },\n  blueBackgroundColor: {\n    backgroundColor: '#2995F3',\n  },\n  finalTotalLabelClass: {\n    paddingLeft: '10px',\n  },\n  finalTotalInputClass: {\n    backgroundColor: 'rgba(0,0,0,.12)',\n    borderRadius: '5px 5px 0 0',\n    paddingLeft: '10px',\n  },\n  alignCenterGrid: {\n    width: '100%',\n    display: 'flex',\n    justifyContent: 'center',\n  },\n  formSubmittingWrapper: {\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'center',\n    alignItems: 'center',\n    width: '100%',\n  },\n  progressBarWrapper: {\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'center',\n    alignItems: 'center',\n    width: '100%',\n  },\n  progressBar: {\n    width: '25%',\n  },\n  progressBarExplanation: {\n    marginTop: '20px',\n    fontSize: '1.1rem',\n  },\n  ManagementOrCobrokeCompanyTextField: {\n    width: '100%',\n    margin: 8,\n    marginLeft: 0,\n  },\n});\n\nconst radioInputAgentItems = [\n  { label: '60%', value: '60' },\n  { label: '70%', value: '70' },\n  { label: '80%', value: '80' },\n];\n\nconst radioInputAgentPaymentItems = [\n  { label: 'Ill pick up the check' },\n  { label: 'Please ACH me' },\n];\n\nconst radioInputYesNoItems = [{ label: 'Yes' }, { label: 'No' }];\n\nconst invoiceTypeSelectItems = [\n  { label: 'Residential Rental' },\n  { label: 'Residential Sale' },\n  { label: 'Commercial Rental' },\n  { label: 'Commercial Sale' },\n];\n\nconst fundsPaidBySelectItems = [\n  { label: 'Bringing a ckeck to the office' },\n  { label: 'Remote deposit to Chase account' },\n  { label: 'Check or \"OP\" mailed to office' },\n  { label: 'Cridit card payment' },\n  { label: 'Client wired funds' },\n  { label: 'Commision advance' },\n];\n\nconst paymentTypeSelectItems = [\n  { label: 'Check' },\n  { label: 'Money Order' },\n  { label: 'Wire' },\n  { label: 'Owner Pays (OP)' },\n];\n\n@observer\nclass SubmitInvoiceForm extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      shouldRenderInitialDeductionItem: true,\n    };\n  }\n  isFirstTimeRender = true;\n\n  componentDidMount() {\n    if (this.props.setInitialContainerState && this.props.submittedInvoice) {\n      this.props.setInitialContainerState({\n        total: this.props.submittedInvoice.total,\n      });\n    }\n  }\n\n  render() {\n    let firstName;\n    let lastName;\n    let agentPart;\n    let agentType;\n    let state;\n\n    if (this.props.agent) {\n      firstName = this.props.agent.firstName;\n      lastName = this.props.agent.lastName;\n      agentPart = this.props.agent.agentPart;\n      agentType = this.props.agent.agent.agentType;\n      state = this.props.agent.agent.state;\n    }\n\n    const {\n      classes,\n      setAgentDisclosureForm,\n      setContractOrLeaseForms,\n      agentDisclosureForm,\n      contractOrLeaseForms,\n      subtractPaymentValueFromState,\n      choosingMgmtCoBrokeCompany,\n      toggleChoosingMgmtCoBrokeCompany,\n      handleMgmtOrCobrokeCompanyChange,\n      setHasSetNewMgmtOrCobrokeCompany,\n      newMgmtOrCobrokeCompany,\n      addedManagementCompanies,\n      formSubmissionBegun,\n      submittingFormToServer,\n      submittedInvoice,\n      isEditingInvoice,\n      managementCobrokeCompanyItems,\n      isViewType,\n    } = this.props;\n\n    const managementCobrokeCompanies =\n      managementCobrokeCompanyItems && managementCobrokeCompanyItems.length\n        ? [...managementCobrokeCompanyItems]\n        : [];\n\n    if (submittedInvoice && submittedInvoice.managementOrCobrokeCompany) {\n      if (\n        !managementCobrokeCompanies.includes(\n          submittedInvoice.managementOrCobrokeCompany\n        )\n      ) {\n        managementCobrokeCompanies.push(\n          submittedInvoice.managementOrCobrokeCompany\n        );\n      }\n    }\n\n    let managementCobrokeCompanySelectItems = managementCobrokeCompanies.map(\n      company => ({ label: company })\n    );\n\n    managementCobrokeCompanySelectItems = managementCobrokeCompanySelectItems\n      ? [\n          ...managementCobrokeCompanySelectItems,\n          ...addedManagementCompanies.map(company => ({ label: company })),\n          { label: 'Add a new item...' },\n        ]\n      : [];\n\n    let finalDefaultValues;\n\n    if (submittedInvoice) {\n      const {\n        agentNotes,\n        agentType,\n        agentName,\n        city,\n        clientPhoneNumber,\n        clientName,\n        date,\n        invoiceType,\n        managementOrCobrokeCompany,\n        propertyAddress,\n        // shouldSendApprovalTextMessageNotification,\n        state,\n        price,\n        paymentItems,\n        apartmentNumber,\n        total,\n        attention,\n        attentionEmail,\n      } = submittedInvoice;\n      finalDefaultValues = {\n        agent: agentName,\n        agentNotes,\n        agentType,\n        city,\n        apartmentNumber,\n        clientPhoneNumber,\n        clientName,\n        date: moment(date).format('MMMM Do YYYY'),\n        invoiceType,\n        managementOrCobrokeCompany,\n        propertyAddress,\n        // shouldSendApprovalTextMessageNotification,\n        state,\n        price,\n        paymentItems: paymentItems.map(\n          ({ paymentType, checkOrTransactionNumber, amount }) => ({\n            paymentType,\n            checkOrTransactionNumber,\n            amount,\n          })\n        ),\n        financialsTotal: total ? total.toLocaleString() : '0',\n        attention,\n        attentionEmail,\n      };\n    }\n\n    return (\n      <div className={classes.formWrapper}>\n        {!formSubmissionBegun ? (\n          <Form\n            defaultValues={\n              !finalDefaultValues && this.props.agent\n                ? {\n                    date: `${moment().format('MMMM Do YYYY')}`,\n                    agentType: `${this.props.agent.agent.agentType}`,\n                    state: this.props.agent.agent.state,\n                    agent: `${capitalize(\n                      this.props.agent.firstName\n                    )} ${capitalize(this.props.agent.lastName)}`,\n                    financialsTotal: this.props.total,\n                  }\n                : finalDefaultValues\n            }\n            preValidate={this.preValidate}\n            onSubmit={this.props.onSubmit}\n            onSubmitFailure={this.props.onSubmitFailure}\n            validate={validators}\n            validateOnMount\n            getApi={formApi => {\n              this.props.getFormApi(formApi);\n            }}\n          >\n            {formApi => {\n              /*\n              if (this.isFirstTimeRender) {\n                this.isFirstTimeRender = false;\n                formApi.setValue('date', `${moment().format('MMMM Do YYYY')}`);\n                formApi.setValue(\n                  'agent',\n                  `${capitalize(firstName)} ${capitalize(lastName)}`\n                );\n                formApi.setValue('agentType', `${agentType}`);\n                formApi.setValue('state', state);\n                formApi.setValue('financialsTotal', this.props.total);\n              }\n              */\n\n              return (\n                <form\n                  onSubmit={formApi.submitForm}\n                  id=\"form1\"\n                  className={classes.formRoot}\n                >\n                  <Grid container spacing={24}>\n                    <Grid item sm={6} xs={12}>\n                      <div className={classes.formControlWrapper}>\n                        <CustomTextField\n                          field=\"date\"\n                          id={uuid()}\n                          label=\"Date\"\n                          disabled\n                          fullWidth\n                          required\n                        />\n                      </div>\n                    </Grid>\n                    <Grid item sm={6} xs={12}>\n                      <div className={classes.formControlWrapper}>\n                        <CustomTextField\n                          field=\"agent\"\n                          id={uuid()}\n                          label=\"Agent\"\n                          disabled\n                          fullWidth\n                          required\n                        />\n                      </div>\n                    </Grid>\n\n                    <div\n                      className={`${classes.formControlWrapper} ${\n                        classes.radioInputWrapper\n                      }`}\n                    >\n                      <MaterialCustomRadioInput\n                        field=\"agentType\"\n                        id={uuid()}\n                        required\n                        label=\"Agent Type\"\n                        radioInputItems={radioInputAgentItems}\n                        disabled\n                        horizontal\n                      />\n                    </div>\n\n                    <div className={classes.formSubheading}>\n                      <Typography\n                        variant=\"subheading\"\n                        classes={{ subheading: classes.h3 }}\n                      >\n                        Property Information\n                      </Typography>\n                    </div>\n\n                    <Grid item sm={6} xs={12}>\n                      <div className={classes.formControlWrapper}>\n                        <MaterialCustomSelectInput\n                          field=\"invoiceType\"\n                          id={uuid()}\n                          required\n                          fullWidth\n                          label=\"Invoice Type\"\n                          name=\"invoiceType\"\n                          selectInputItems={invoiceTypeSelectItems}\n                          disabled={submittedInvoice && !isEditingInvoice}\n                        />\n                      </div>\n                    </Grid>\n\n                    <Grid item sm={6} xs={12}>\n                      <div className={classes.formControlWrapper}>\n                        <CustomTextField\n                          field=\"propertyAddress\"\n                          id={uuid()}\n                          label=\"Property Address\"\n                          required\n                          fullWidth\n                          disabled={submittedInvoice && !isEditingInvoice}\n                        />\n                      </div>\n                    </Grid>\n                    <Grid item sm={6} xs={12}>\n                      <div className={classes.formControlWrapper}>\n                        <CustomTextField\n                          field=\"state\"\n                          id={uuid()}\n                          label=\"State\"\n                          required\n                          fullWidth\n                          disabled\n                        />\n                      </div>\n                    </Grid>\n                    <Grid item sm={6} xs={12}>\n                      <div className={classes.formControlWrapper}>\n                        <CustomTextField\n                          field=\"city\"\n                          id={uuid()}\n                          label=\"City\"\n                          required\n                          fullWidth\n                          disabled={submittedInvoice && !isEditingInvoice}\n                        />\n                      </div>\n                    </Grid>\n                    <Grid item sm={6} xs={12}>\n                      <div className={classes.formControlWrapper}>\n                        <CustomTextField\n                          field=\"apartmentNumber\"\n                          id={uuid()}\n                          label=\"Apartment Number\"\n                          required\n                          fullWidth\n                          disabled={submittedInvoice && !isEditingInvoice}\n                        />\n                      </div>\n                    </Grid>\n                    {!choosingMgmtCoBrokeCompany ? (\n                      <Grid item sm={6} xs={12}>\n                        <div className={classes.formControlWrapper}>\n                          <MaterialCustomSelectInput\n                            field=\"managementOrCobrokeCompany\"\n                            id={uuid()}\n                            required\n                            fullWidth\n                            label=\"Management/Co-Broke Company\"\n                            name=\"managementOrCobrokeCompany\"\n                            onChange={value => {\n                              if (value === 'Add a new item...') {\n                                toggleChoosingMgmtCoBrokeCompany(true);\n                              }\n                            }}\n                            selectInputItems={\n                              managementCobrokeCompanySelectItems\n                            }\n                            disabled={submittedInvoice && !isEditingInvoice}\n                          />\n                        </div>\n                      </Grid>\n                    ) : (\n                      <Grid item sm={6} xs={12}>\n                        <div className={classes.formControlWrapper}>\n                          <TextField\n                            id=\"newManagementOrCobrokeCompany\"\n                            label=\"Add Mgmt/Co-broke Company...\"\n                            value={newMgmtOrCobrokeCompany}\n                            className={\n                              classes.ManagementOrCobrokeCompanyTextField\n                            }\n                            onChange={handleMgmtOrCobrokeCompanyChange}\n                            margin=\"normal\"\n                          />\n                        </div>\n                        <Button\n                          classes={{ root: classes.removePaymentBtn }}\n                          variant=\"raised\"\n                          color=\"secondary\"\n                          style={{ marginLeft: '0' }}\n                          onClick={() => {\n                            toggleChoosingMgmtCoBrokeCompany(false);\n                            formApi.setValue('managementOrCobrokeCompany', '');\n                          }}\n                          type=\"button\"\n                        >\n                          Cancel\n                        </Button>\n                        <Button\n                          classes={{ root: classes.addPaymentBtn }}\n                          variant=\"raised\"\n                          color=\"primary\"\n                          style={{ marginLeft: '10px', marginTop: '5px' }}\n                          onClick={() => {\n                            const trimmedItem = newMgmtOrCobrokeCompany.trim();\n                            if (!newMgmtOrCobrokeCompany || !trimmedItem)\n                              return;\n\n                            const items = [\n                              ...managementCobrokeCompanyItems,\n                              ...addedManagementCompanies,\n                            ];\n\n                            const regex = new RegExp(trimmedItem, 'i');\n\n                            const match = items.filter(item =>\n                              item.match(regex)\n                            );\n\n                            if (match.length) {\n                              toggleChoosingMgmtCoBrokeCompany(false);\n                              formApi.setValue(\n                                'managementOrCobrokeCompany',\n                                match[0]\n                              );\n                              return;\n                            }\n\n                            setHasSetNewMgmtOrCobrokeCompany();\n                            formApi.setValue(\n                              'managementOrCobrokeCompany',\n                              capitalize(newMgmtOrCobrokeCompany)\n                            );\n                          }}\n                          type=\"button\"\n                        >\n                          Add Item\n                        </Button>\n                      </Grid>\n                    )}\n                    <Grid item xs={12}>\n                      <div className={classes.formControlWrapper}>\n                        <CustomTextField\n                          field=\"price\"\n                          id={uuid()}\n                          label=\"Rent or Sale Price\"\n                          required\n                          fullWidth\n                          noLetters\n                          isDollarAmount\n                          disabled={submittedInvoice && !isEditingInvoice}\n                        />\n                      </div>\n                    </Grid>\n\n                    <div className={classes.formSubheading}>\n                      <Typography\n                        variant=\"subheading\"\n                        classes={{ subheading: classes.h3 }}\n                      >\n                        {\"Client's\"} Information\n                      </Typography>\n                    </div>\n\n                    <Grid item xs={12} sm={6}>\n                      <div className={classes.formControlWrapper}>\n                        <CustomTextField\n                          field=\"clientName\"\n                          id={uuid()}\n                          label=\"Client's Name\"\n                          required\n                          fullWidth\n                          disabled={submittedInvoice && !isEditingInvoice}\n                        />\n                      </div>\n                    </Grid>\n\n                    <Grid item xs={12} md={6}>\n                      <div className={classes.formControlWrapper}>\n                        <CustomInputMask\n                          mask=\"(999) 999-9999\"\n                          maskChar={null}\n                          placeholder=\"Client's Phone Number\"\n                          disabled={submittedInvoice && !isEditingInvoice}\n                          defaultValue={\n                            isViewType && submittedInvoice\n                              ? submittedInvoice.clientPhoneNumber\n                              : undefined\n                          }\n                        >\n                          {props => (\n                            <CustomTextField\n                              field=\"clientPhoneNumber\"\n                              id={uuid()}\n                              label=\"Client's Phone Number\"\n                              fullWidth\n                              required\n                              type=\"tel\"\n                              isInputMasked\n                              requiresDefaultOnChange\n                              mask=\"(999) 999-9999\"\n                              {...props}\n                              disabledStyle={\n                                submittedInvoice && !isEditingInvoice\n                              }\n                            />\n                          )}\n                        </CustomInputMask>\n                      </div>\n                    </Grid>\n\n                    <div\n                      className={`${classes.formSubheading} ${\n                        classes.paddingBottom10\n                      }`}\n                    >\n                      <Typography\n                        variant=\"subheading\"\n                        classes={{ subheading: classes.h3 }}\n                      >\n                        Transaction Financials\n                      </Typography>\n                    </div>\n\n                    <div className={classes.formMiniHeading}>\n                      <Typography\n                        variant=\"subheading\"\n                        classes={{\n                          subheading: classes.h4,\n                          root: classes.greenText,\n                        }}\n                      >\n                        Paid:\n                      </Typography>\n                    </div>\n\n                    <NestedField field={['paymentItems', 0]}>\n                      <Grid item sm={4} xs={12}>\n                        <div className={classes.formControlWrapper}>\n                          <MaterialCustomSelectInput\n                            field=\"paymentType\"\n                            id={uuid()}\n                            required\n                            fullWidth\n                            label=\"Payment Type\"\n                            name=\"paymentType\"\n                            selectInputItems={paymentTypeSelectItems}\n                            validate={paymentTypeValidator}\n                            disabled={submittedInvoice && !isEditingInvoice}\n                          />\n                        </div>\n                      </Grid>\n\n                      <Grid item sm={4} xs={12}>\n                        <div className={classes.formControlWrapper}>\n                          <CustomTextField\n                            field=\"checkOrTransactionNumber\"\n                            id={uuid()}\n                            label=\"Check/Transaction#\"\n                            required\n                            fullWidth\n                            validate={checkOrTransactionNumberValidator}\n                            disabled={submittedInvoice && !isEditingInvoice}\n                          />\n                        </div>\n                      </Grid>\n\n                      <Grid item sm={4} xs={12}>\n                        <div className={classes.formControlWrapper}>\n                          <CustomTextField\n                            field=\"amount\"\n                            id={uuid()}\n                            label=\"Amount\"\n                            required\n                            fullWidth\n                            validate={paymentAmountValidator}\n                            noLetters\n                            noNegativeSign\n                            onChangeWithID={\n                              this.props.paymentAmountChangeHandler\n                            }\n                            isDollarAmount\n                            disabled={submittedInvoice && !isEditingInvoice}\n                          />\n                        </div>\n                      </Grid>\n                    </NestedField>\n\n                    {formApi.values.paymentItems &&\n                      formApi.values.paymentItems\n                        .map((paymentItems, i) => (\n                          <div className={classes.paymentItemsWrapper} key={i}>\n                            <NestedField field={['paymentItems', i]}>\n                              <Grid item sm={4} xs={12}>\n                                <div className={classes.formControlWrapper}>\n                                  <MaterialCustomSelectInput\n                                    field=\"paymentType\"\n                                    id={uuid()}\n                                    required\n                                    fullWidth\n                                    label=\"Payment Type\"\n                                    name=\"paymentType\"\n                                    selectInputItems={paymentTypeSelectItems}\n                                    validate={paymentTypeValidator}\n                                    disabled={\n                                      submittedInvoice && !isEditingInvoice\n                                    }\n                                  />\n                                </div>\n                              </Grid>\n\n                              <Grid item sm={4} xs={12}>\n                                <div className={classes.formControlWrapper}>\n                                  <CustomTextField\n                                    field=\"checkOrTransactionNumber\"\n                                    id={uuid()}\n                                    label=\"Check/Transaction#\"\n                                    required\n                                    fullWidth\n                                    validate={checkOrTransactionNumberValidator}\n                                    disabled={\n                                      submittedInvoice && !isEditingInvoice\n                                    }\n                                  />\n                                </div>\n                              </Grid>\n\n                              <Grid item sm={4} xs={12}>\n                                <div className={classes.formControlWrapper}>\n                                  <CustomTextField\n                                    field=\"amount\"\n                                    id={uuid()}\n                                    label=\"Amount\"\n                                    required\n                                    fullWidth\n                                    validate={paymentAmountValidator}\n                                    noLetters\n                                    noNegativeSign\n                                    onChangeWithID={\n                                      this.props.paymentAmountChangeHandler\n                                    }\n                                    isDollarAmount\n                                    disabled={\n                                      submittedInvoice && !isEditingInvoice\n                                    }\n                                  />\n                                </div>\n                              </Grid>\n                            </NestedField>\n                            <Button\n                              classes={{ root: classes.removePaymentBtn }}\n                              variant=\"raised\"\n                              color=\"secondary\"\n                              onClick={() => {\n                                const amount = Number(\n                                  formApi.values.paymentItems[i].amount\n                                );\n\n                                if (amount) {\n                                  subtractPaymentValueFromState(amount);\n                                }\n\n                                formApi.removeValue('paymentItems', i);\n                              }}\n                              type=\"button\"\n                              disabled={submittedInvoice && !isEditingInvoice}\n                            >\n                              Remove\n                            </Button>\n                          </div>\n                        ))\n                        .slice(1)}\n                    <Grid item xs={12}>\n                      <Button\n                        classes={{ root: classes.addPaymentBtn }}\n                        variant=\"raised\"\n                        color=\"primary\"\n                        onClick={() => formApi.addValue('paymentItems')}\n                        type=\"button\"\n                        disabled={submittedInvoice && !isEditingInvoice}\n                      >\n                        Add invoice item\n                      </Button>\n                    </Grid>\n\n                    <Grid item xs={12}>\n                      <div className={classes.formControlWrapper}>\n                        <CustomTextField\n                          field=\"financialsTotal\"\n                          id={uuid()}\n                          label=\"Total\"\n                          disabled\n                          fullWidth\n                          labelClassName={classes.finalTotalLabelClass}\n                          submittedValue={`${this.props.total}`}\n                          formApi={formApi}\n                          convertToLocaleString\n                          isDollarAmount\n                          inputRootClassName={classes.finalTotalInputClass}\n                        />\n                      </div>\n                    </Grid>\n\n                    <div\n                      className={`${classes.formSubheading} ${\n                        classes.paddingBottom10\n                      }`}\n                    >\n                      <Typography\n                        variant=\"subheading\"\n                        classes={{ subheading: classes.h3 }}\n                      >\n                        Send To\n                      </Typography>\n                    </div>\n\n                    <Grid item xs={12}>\n                      <Divider />\n                    </Grid>\n\n                    <Grid item xs={12} sm={6}>\n                      <div className={classes.formControlWrapper}>\n                        <CustomTextField\n                          field=\"attention\"\n                          id={uuid()}\n                          label=\"Attention\"\n                          required\n                          fullWidth\n                          disabled={submittedInvoice && !isEditingInvoice}\n                        />\n                      </div>\n                    </Grid>\n\n                    <Grid item xs={12} sm={6}>\n                      <div className={classes.formControlWrapper}>\n                        <CustomTextField\n                          field=\"attentionEmail\"\n                          id={uuid()}\n                          label=\"Email\"\n                          type=\"email\"\n                          required\n                          fullWidth\n                          disabled={submittedInvoice && !isEditingInvoice}\n                        />\n                      </div>\n                    </Grid>\n\n                    <div className={classes.formMiniHeading2}>\n                      <Typography\n                        variant=\"subheading\"\n                        classes={{ subheading: classes.h4 }}\n                      >\n                        Other:\n                      </Typography>\n                    </div>\n\n                    <Grid item xs={12}>\n                      <Divider />\n                    </Grid>\n\n                    <Grid item xs={12}>\n                      <div className={classes.formControlWrapper}>\n                        <CustomTextField\n                          field=\"agentNotes\"\n                          id={uuid()}\n                          label=\"Notes\"\n                          fullWidth\n                          multiline\n                          placeholder=\"Leave any notes here...\"\n                          disabled={submittedInvoice && !isEditingInvoice}\n                        />\n                      </div>\n                    </Grid>\n                  </Grid>\n                </form>\n              );\n            }}\n          </Form>\n        ) : null}\n\n        {submittingFormToServer ? (\n          <div className={classes.formSubmittingWrapper}>\n            <Icon type=\"loading\" style={{ color: '#000', fontSize: '4rem' }} />\n            <div className={classes.progressBarExplanation}>\n              Submitting form...\n            </div>\n          </div>\n        ) : null}\n      </div>\n    );\n  }\n}\n\nexport default withStyles(styles)(SubmitInvoiceForm);\n\n\n\n// WEBPACK FOOTER //\n// src/components/forms/SubmitInvoiceForm/index.js"],"mappings":";;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC3CA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAUA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AANA;AAQA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AADA;AAPA;AAWA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAfA;AAmBA;AACA;AADA;AAGA;AACA;AADA;AAxDA;AAAA;AACA;AA4DA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAHA;AAaA;AAbA;AAcA;AACA;;;AA0DA;AAAA;AAAA;AAAA;AAAA;AAEA;AAFA;AAAA;AAAA;AAAA;AAAA;AAUA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAwBA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAAA;AAAA;AAHA;AAAA;AAAA;AAAA;AAAA;AAXA;AAAA;AAAA;AAAA;AAAA;AAuBA;;;;;;;;;;;AA/IA;;;;;;;AAiBA;AACA;AACA;AADA;AAIA;;;;;;AAEA;AACA;AACA;AACA;AACA;AAHA;AAKA;;;;;;AAEA;AACA;AACA;AACA;AACA;AAHA;AAKA;;;;;;AAEA;AACA;AACA;AADA;AAIA;;;;;;AAEA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AANA;AAAA;AAAA;AAAA;AAAA;AASA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAQA;;;;AA0EA;AACA;AADA;;;;;;;;;;;;AAvNA;AAQA;AA6DA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACrFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAQA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA;AAYA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AAHA;AAKA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AANA;AAWA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AArBA;AAuBA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AADA;AARA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AADA;AAGA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AAHA;AAxLA;AAAA;AACA;AA8LA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAGA;AACA;AAAA;AACA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAGA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAGA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAGA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AADA;AAFA;AAKA;AACA;;;AAEA;AACA;AACA;AACA;AADA;AAGA;AACA;;;AAEA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAdA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAoCA;AACA;AAIA;AACA;AAKA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AAGA;AAAA;AAAA;AAAA;AACA;AAAA;AAIA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;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","sourceRoot":""}