{"version":3,"file":"5.412f1ea97a96e2b7e340.hot-update.js","sources":["webpack:///../node_modules/debounce/index.js","webpack:///src/components/MaterialCustomTextFieldWrapper/index.js"],"sourcesContent":["/**\n * Returns a function, that, as long as it continues to be invoked, will not\n * be triggered. The function will be called after it stops being called for\n * N milliseconds. If `immediate` is passed, trigger the function on the\n * leading edge, instead of the trailing. The function also has a property 'clear' \n * that is a function which will clear the timer to prevent previously scheduled executions. \n *\n * @source underscore.js\n * @see http://unscriptable.com/2009/03/20/debouncing-javascript-methods/\n * @param {Function} function to wrap\n * @param {Number} timeout in ms (`100`)\n * @param {Boolean} whether to execute at the beginning (`false`)\n * @api public\n */\n\nmodule.exports = function debounce(func, wait, immediate){\n  var timeout, args, context, timestamp, result;\n  if (null == wait) wait = 100;\n\n  function later() {\n    var last = Date.now() - timestamp;\n\n    if (last < wait && last >= 0) {\n      timeout = setTimeout(later, wait - last);\n    } else {\n      timeout = null;\n      if (!immediate) {\n        result = func.apply(context, args);\n        context = args = null;\n      }\n    }\n  };\n\n  var debounced = function(){\n    context = this;\n    args = arguments;\n    timestamp = Date.now();\n    var callNow = immediate && !timeout;\n    if (!timeout) timeout = setTimeout(later, wait);\n    if (callNow) {\n      result = func.apply(context, args);\n      context = args = null;\n    }\n\n    return result;\n  };\n\n  debounced.clear = function() {\n    if (timeout) {\n      clearTimeout(timeout);\n      timeout = null;\n    }\n  };\n  \n  debounced.flush = function() {\n    if (timeout) {\n      result = func.apply(context, args);\n      context = args = null;\n      \n      clearTimeout(timeout);\n      timeout = null;\n    }\n  };\n\n  return debounced;\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../node_modules/debounce/index.js\n// module id = ../node_modules/debounce/index.js\n// module chunks = 5","import React from 'react';\nimport { observer } from 'mobx-react';\nimport { withStyles } from 'material-ui/styles';\nimport Input, { InputLabel, InputAdornment } from 'material-ui/Input';\nimport { FormControl, FormHelperText } from 'material-ui/Form';\nimport { Field } from 'react-form';\nimport uuid from 'uuid/v4';\nimport classnames from 'classnames';\nimport debounce from 'debounce';\n\nconst numbersOnlyRegex = /^\\d+$/;\nconst noLettersRegex = /^[^a-zA-Z]+$/;\nconst noNegativeSignRegex = /^[^-]/;\n\nconst styles = theme => ({\n  container: {\n    display: 'flex',\n    flexWrap: 'wrap',\n  },\n  formControl: {\n    margin: theme.spacing.unit,\n    marginLeft: 0,\n  },\n  textField: {\n    marginLeft: theme.spacing.unit,\n    marginRight: theme.spacing.unit,\n    width: 200,\n  },\n  disabled: {\n    cursor: 'not-allowed',\n  },\n  redErrorText: {\n    color: '#f44336',\n  },\n});\n\nclass CustomTextFieldWrapper extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      id: uuid(),\n      submittedValue: this.props.submittedValue,\n    };\n  }\n\n  componentWillUnmount = () => {\n    if (this._fieldApi) this._fieldApi.setError('');\n  };\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    const { convertToLocaleString } = nextProps;\n    if (\n      nextProps.formApi &&\n      nextProps.submittedValue !== prevState.submittedValue\n    ) {\n      const val = convertToLocaleString\n        ? Number(nextProps.submittedValue).toLocaleString()\n        : nextProps.submittedValue;\n      nextProps.formApi.setValue(nextProps.field, val);\n      return { submittedValue: nextProps.submittedValue };\n    }\n    return null;\n  }\n\n  returnStartAdornment = () => {\n    const { isDollarAmount, isPercentAmount, customPrefix } = this.props;\n    if (isDollarAmount) {\n      return <InputAdornment position=\"start\">$</InputAdornment>;\n    } else if (isPercentAmount) {\n      return <InputAdornment position=\"start\">%</InputAdornment>;\n    } else if (customPrefix) {\n      return <InputAdornment position=\"start\">{customPrefix}</InputAdornment>;\n    }\n    return null;\n  };\n\n  render() {\n    const { returnStartAdornment } = this;\n\n    return (\n      <Field\n        validate={this.props.validate}\n        field={this.props.field}\n        {...this.props}\n      >\n        {fieldApi => {\n          const {\n            onInput,\n            classes,\n            submittedClasses,\n            label,\n            id,\n            disabled,\n            fullWidth,\n            required,\n            multiline,\n            field,\n            onBlur,\n            onChange,\n            inputClassName,\n            labelClassName,\n            validate,\n            numbersOnly,\n            noLetters,\n            onChangeWithID,\n            submittedValue,\n            noNegativeSign,\n            convertToLocaleString,\n            formApi,\n            isDollarAmount,\n            inputRootClassName,\n            isPercentAmount,\n            requiresDefaultOnChange,\n            isInputMasked,\n            beforeUnmount,\n            isEditingDeal,\n            defaultValue,\n            disabledStyle,\n            formControlClassName,\n            shrink,\n            mask,\n            ...rest\n          } = this.props;\n\n          const {\n            value,\n            error,\n            warning,\n            success,\n            setValue,\n            setTouched,\n            touched,\n          } = fieldApi;\n\n          this._fieldApi = fieldApi;\n\n          return (\n            <FormControl\n              className={classnames(\n                disabled || disabledStyle ? classes.disabled : null,\n                classes.formControl,\n                formControlClassName\n              )}\n              error={error && touched}\n              disabled={disabled || disabledStyle}\n              fullWidth={fullWidth}\n              required={required}\n            >\n              {label ? (\n                <InputLabel\n                  htmlFor={id}\n                  shrink={shrink}\n                  className={\n                    disabled || disabledStyle\n                      ? `${classes.disabled} ${labelClassName}`\n                      : `${labelClassName}`\n                  }\n                >\n                  {label}\n                </InputLabel>\n              ) : null}\n              <Input\n                defaultValue={defaultValue}\n                inputRef={ref => (this._input = ref)}\n                className={disabled || disabledStyle ? classes.disabled : null}\n                inputProps={{\n                  className:\n                    disabled || disabledStyle\n                      ? `${classes.disabled} ${inputClassName}`\n                      : `${inputClassName}`,\n                }}\n                value={value || ''}\n                classes={\n                  inputRootClassName ? { root: inputRootClassName } : null\n                }\n                id={id}\n                onChange={e => {\n                  const newValue = e.target.value;\n                  if (\n                    numbersOnly &&\n                    newValue &&\n                    !numbersOnlyRegex.test(newValue)\n                  ) {\n                    return;\n                  }\n\n                  if (noLetters && newValue && !noLettersRegex.test(newValue)) {\n                    return;\n                  }\n\n                  if (\n                    noNegativeSign &&\n                    newValue &&\n                    !noNegativeSignRegex.test(newValue)\n                  ) {\n                    return;\n                  }\n\n                  if (!isInputMasked) {\n                    setValue(newValue);\n                  }\n\n                  if (isInputMasked) {\n                    if (mask && mask.length && newValue.length <= mask.length) {\n                      setValue(newValue);\n                      debounce(() => setValue(this._input.value), 100);\n                    }\n                  }\n\n                  if (onChange && typeof onChange === 'function') {\n                    if (requiresDefaultOnChange || isInputMasked) {\n                      onChange(e, setValue);\n                    } else {\n                      onChange(newValue, setValue, e);\n                    }\n                  }\n\n                  if (onChangeWithID && typeof onChangeWithID === 'function') {\n                    onChangeWithID(this.state.id, newValue, e);\n                  }\n                }}\n                onBlur={event => {\n                  if (event.target.value || touched) setTouched();\n                  if (onBlur) {\n                    onBlur(event);\n                  }\n                }}\n                multiline={multiline}\n                startAdornment={returnStartAdornment()}\n                {...rest}\n              />\n              {error && touched ? (\n                <FormHelperText\n                  classes={{ root: classes.redErrorText }}\n                  id={`${id}-error-text`}\n                >\n                  {error}\n                </FormHelperText>\n              ) : null}\n            </FormControl>\n          );\n        }}\n      </Field>\n    );\n  }\n}\n\nexport default withStyles(styles)(observer(CustomTextFieldWrapper));\n\n/*\n\n{error && touched ? <Message color=\"#ef5350\" message={error} /> : null}\n        {!error && warning && touched ? (\n          <Message color=\"orange\" message={warning} />\n        ) : null}\n        {!error && !warning && success ? (\n          <Message color=\"green\" message={success} />\n        ) : null}\n\n*/\n\n\n\n// WEBPACK FOOTER //\n// src/components/MaterialCustomTextFieldWrapper/index.js"],"mappings":";;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACjEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AAHA;AAKA;AACA;AADA;AAGA;AACA;AADA;AAjBA;AAAA;AACA;AAqBA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AASA;AACA;AAVA;AAAA;AAAA;AAAA;AAAA;AAAA;AA2BA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AArCA;AAEA;AACA;AACA;AAFA;AAFA;AAMA;AACA;;;AAgCA;AAAA;AACA;AADA;AAGA;AAEA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAiDA;AAEA;AAEA;AAKA;AACA;AACA;AACA;AATA;AAAA;AAAA;AAAA;AAAA;AAaA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAaA;AACA;AAAA;AAAA;AACA;AACA;AACA;AADA;AAMA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAnEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAwEA;AAAA;AAAA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AASA;AAGA;;;;;;;;;;AAnMA;AAAA;AACA;AACA;AAIA;AAGA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;;;;AA1BA;AACA;AAkNA;AACA;AADA;AAEA;AACA;;;;;;;;;;;;;;;;;;;;;;AAhPA;AACA;AACA;AAEA;AAsBA;;;;;;;;;;;;;A","sourceRoot":""}