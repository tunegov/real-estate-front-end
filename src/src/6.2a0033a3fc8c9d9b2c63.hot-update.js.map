{"version":3,"file":"6.2a0033a3fc8c9d9b2c63.hot-update.js","sources":["webpack:///src/containers/CreateAgentForm.js"],"sourcesContent":["import React, { Component } from 'react';\nimport { observer } from 'mobx-react';\nimport axios from 'axios';\nimport CreateAgentForm from '../components/forms/CreateAgentForm';\nimport { round } from '../utils/Math';\nimport { capitalize } from '../utils/stringUtils';\nimport createAgent from '../effects/users/createAgent';\nimport setAgentProfilePic from '../effects/users/setAgentProfilePic';\n\n@observer\nclass CreateAgentContainer extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      imageFile: '',\n      imageFileConfirmed: false,\n      confirmedImageDataURL: null,\n      imageScale: 0,\n      adjustedImageScale: 1,\n      loadingSetImg: false,\n      uplodingImageProgress: 0,\n      isUploadingImage: false,\n      formSubmitedSuccessfully: false,\n      imageBlob: null,\n      submittingFormToServer: false,\n    };\n  }\n\n  setImageFile = file => {\n    this.setState({ imageFile: file });\n  };\n\n  clearImageFile = () => {\n    this.setState({\n      imageFile: '',\n      imageFileConfirmed: false,\n      confirmedImageDataURL: null,\n    });\n\n    if (this._fileUploadInput) {\n      this._fileUploadInput.value = null;\n    }\n  };\n\n  getFileUploadInput = input => {\n    this._fileUploadInput = input;\n  };\n\n  getProfilePicEditor = editor => {\n    this._profilePicEditor = editor;\n  };\n\n  setImageScale = num => {\n    const rawScale = Number(num);\n    const adjustedImageScale = round(1 + rawScale / 100, 2);\n    this.setState({ imageScale: rawScale, adjustedImageScale });\n  };\n\n  confirmImageFile = () => {\n    if (this._profilePicEditor) {\n      // This returns a HTMLCanvasElement, it can be made into a data URL or a blob,\n      // drawn on another canvas, or added to the DOM.\n      const canvas = this._profilePicEditor.getImage();\n\n      canvas.toBlob(blob => {\n        this.setState({\n          imageBlob: blob,\n          imageFileConfirmed: true,\n          loadingSetImg: true,\n          confirmedImageDataURL: URL.createObjectURL(blob),\n        });\n      });\n      // If you want the image resized to the canvas size (also a HTMLCanvasElement)\n      // const canvasScaled = this._profilePicEditor.getImageScaledToCanvas();\n    }\n  };\n\n  setFinishedLoadingImg = () => {\n    this.setState({ loadingSetImg: false });\n  };\n\n  onSubmit = (values, e, formApi) => {\n    const { imageFile, imageFileConfirmed } = this.state;\n    const returnValues = {\n      ...values,\n      firstName: capitalize(values.firstName),\n      lastName: capitalize(values.lastName),\n      fileName: imageFile && imageFileConfirmed ? imageFile.name : undefined,\n      fileType: imageFile && imageFileConfirmed ? imageFile.type : undefined,\n    };\n\n    delete returnValues.profilePicture;\n\n    this.setState({\n      submittingFormToServer: true,\n    });\n\n    this.props.setFormSubmitted();\n\n    createAgent(returnValues).then(result => {\n      const { signedURL, error, agent } = result;\n\n      if (error) {\n        if (error.field === 'email') {\n          const formElement = document.getElementById('formDialog');\n          formApi.setError(error.field, error.message);\n          formElement.scrollTop = formElement.scrollHeight;\n        }\n        this.setState({\n          submittingFormToServer: false,\n        });\n\n        console.log(error);\n        this.props.setFormSubmitted(false);\n\n        this.props.openRequestErrorSnackbar(error.message);\n\n        return;\n      }\n\n      if (signedURL) {\n        axios\n          .put(signedURL, this.state.imageBlob, {\n            headers: {\n              'Content-Type': this.state.imageFile.type,\n            },\n            onUploadProgress: progressEvent => {\n              // Do whatever you want with the native progress event\n              const loadedPercent =\n                (progressEvent.loaded / progressEvent.total) * 100;\n              this.setState({\n                submittingFormToServer: Math.floor(loadedPercent)\n                  ? false\n                  : true,\n                formSubmitedSuccessfully: true,\n                uplodingImageProgress: Math.floor(loadedPercent),\n                isUploadingImage: loadedPercent >= 100 ? false : true,\n              });\n            },\n          })\n          .then(res => {\n            const status = `${res.status}`;\n            const okRegex = /^[2][0-9][0-9]$/;\n\n            if (!okRegex.test(status)) {\n              this.setState({\n                submittingFormToServer: false,\n                isUploadingImage: false,\n              });\n              this.props.setFormSubmitted(false);\n              this.props.openRequestErrorSnackbar(\n                'There was an error uploading your file. Please try again shortly.'\n              );\n              return;\n            }\n\n            this.setState({\n              submittingFormToServer: true,\n            });\n            setAgentProfilePic(agent.uuid, this.state.imageFile.name)\n              .then(({ url, otherError }) => {\n                this.setState({\n                  submittingFormToServer: false,\n                });\n\n                if (otherError) {\n                  this.props.openRequestErrorSnackbar(otherError);\n\n                  return;\n                }\n                if (url) {\n                  agent.agent.profilePicURL = this.state.confirmedImageDataURL;\n                }\n                this.props.confirmAgentCreated(agent);\n                this.props.setFormSubmitted(false);\n              })\n              .catch(error => {\n                this.props.openRequestErrorSnackbar(\n                  'There was an error uploading your image.'\n                );\n\n                console.log(error);\n                this.setState({\n                  submittingFormToServer: false,\n                });\n                this.props.setFormSubmitted(false);\n              });\n          })\n          .catch(error => {\n            this.props.setFormSubmitted(false);\n            this.setState({\n              submittingFormToServer: false,\n            });\n\n            this.props.openRequestErrorSnackbar(\n              'There was an error uploading your image.'\n            );\n\n            console.log(error);\n          });\n      } else {\n        this.setState({ formSubmitedSuccessfully: true });\n        this.props.setFormSubmitted(false);\n        this.props.confirmAgentCreated(agent);\n      }\n    });\n  };\n\n  onSubmitFailure(errs, onSubmitError) {\n    console.log(errs);\n    console.log(onSubmitError);\n  }\n\n  render() {\n    const { classes, ...rest } = this.props;\n    return (\n      <div style={{ width: '100%' }}>\n        <CreateAgentForm\n          onSubmit={this.onSubmit}\n          onSubmitFailure={this.onSubmitFailure}\n          setImageFile={this.setImageFile}\n          imageFile={this.state.imageFile}\n          imageScale={this.state.imageScale}\n          setImageScale={this.setImageScale}\n          adjustedImageScale={this.state.adjustedImageScale}\n          getFileUploadInput={this.getFileUploadInput}\n          clearImageFile={this.clearImageFile}\n          getProfilePicEditor={this.getProfilePicEditor}\n          imageFileConfirmed={this.state.imageFileConfirmed}\n          confirmImageFile={this.confirmImageFile}\n          confirmedImageDataURL={this.state.confirmedImageDataURL}\n          loadingSetImg={this.state.loadingSetImg}\n          setFinishedLoadingImg={this.setFinishedLoadingImg}\n          uplodingImageProgress={this.state.uplodingImageProgress}\n          formSubmitedSuccessfully={this.state.formSubmitedSuccessfully}\n          isUploadingImage={this.state.isUploadingImage}\n          currentUserRole={this.props.currentUserRole}\n          submittingFormToServer={this.state.submittingFormToServer}\n          getFormApi={formApi => {\n            this._formApi = formApi;\n          }}\n          {...rest}\n        />\n      </div>\n    );\n  }\n}\n\nexport default CreateAgentContainer;\n\n\n\n// WEBPACK FOOTER //\n// src/containers/CreateAgentForm.js"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AAkBA;AAAA;AAAA;AACA;AAnBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAsBA;AACA;AACA;AACA;AAHA;AACA;AAKA;AACA;AACA;AACA;AA/BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAkCA;AACA;AAnCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAsCA;AACA;AAvCA;AAAA;AAAA;AAAA;AAAA;AAAA;AA0CA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AA7CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAgDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AAEA;AACA;AACA;AAhEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAmEA;AAAA;AAAA;AACA;AApEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAsEA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AALA;AACA;AAOA;AACA;AACA;AACA;AADA;AACA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AADA;AACA;AAGA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AANA;AAQA;AAhBA;AAmBA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AACA;AAGA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AADA;AACA;AAEA;AACA;AAAA;AACA;AAAA;AACA;AADA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAEA;AACA;AAGA;AACA;AAAA;AACA;AADA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAAA;AACA;AADA;AACA;AAGA;AACA;AAGA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAnMA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAXA;AAFA;AAeA;AACA;;;AAqLA;AACA;AACA;AACA;;;AAEA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAvBA;AAAA;AAAA;AAAA;AAAA;AAAA;AA4BA;;;;;;;;;;;AA3OA;AACA;AA6OA;AAAA;;;;;;;;;;;;AA9OA;;;;;;;;;;A","sourceRoot":""}